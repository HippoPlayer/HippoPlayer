// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HIPPOMESSAGES_H_
#define FLATBUFFERS_GENERATED_HIPPOMESSAGES_H_

#include "flatbuffers/flatbuffers.h"

struct HippoLoopCurrent;

struct HippoRandomizePlaylist;

struct HippoNextSong;

struct HippoPrevSong;

struct HippoPlaySong;

struct HippoStopSong;

struct HippoPauseSong;

struct HippoRequestAddedUrls;

struct HippoRemoveSelectedPlaylistEntries;

struct HippoRemovePlaylistEntries;

struct HippoRequestSelectSong;

struct HippoRequestAddUrls;

struct HippoLogMessages;

struct HippoLogClear;

struct HippoLogToFile;

struct HippoLogSendMessages;

struct HippoSongDescription;

struct HippoUrlEntry;

struct HippoSelectSong;

struct HippoReplyAddedUrls;

struct HippoRequestTrackerData;

struct HippoRowData;

struct HippoSongMetadata;

struct HippoTrackerChannel;

struct HippoTrackerData;

struct HippoCurrentPosition;

struct HippoMessage;

enum HippoTrackerType {
  HippoTrackerType_Regular = 0,
  HippoTrackerType_Emulated = 1,
  HippoTrackerType_MIN = HippoTrackerType_Regular,
  HippoTrackerType_MAX = HippoTrackerType_Emulated
};

inline const HippoTrackerType (&EnumValuesHippoTrackerType())[2] {
  static const HippoTrackerType values[] = {
    HippoTrackerType_Regular,
    HippoTrackerType_Emulated
  };
  return values;
}

inline const char * const *EnumNamesHippoTrackerType() {
  static const char * const names[3] = {
    "Regular",
    "Emulated",
    nullptr
  };
  return names;
}

inline const char *EnumNameHippoTrackerType(HippoTrackerType e) {
  if (e < HippoTrackerType_Regular || e > HippoTrackerType_Emulated) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesHippoTrackerType()[index];
}

enum MessageType {
  MessageType_NONE = 0,
  MessageType_next_song = 1,
  MessageType_prev_song = 2,
  MessageType_play_song = 3,
  MessageType_stop_song = 4,
  MessageType_loop_current = 5,
  MessageType_randomize_playlist = 6,
  MessageType_request_added_urls = 7,
  MessageType_request_select_song = 8,
  MessageType_select_song = 9,
  MessageType_request_add_urls = 10,
  MessageType_reply_added_urls = 11,
  MessageType_request_tracker_data = 12,
  MessageType_tracker_data = 13,
  MessageType_current_position = 14,
  MessageType_song_metadata = 15,
  MessageType_log_messages = 16,
  MessageType_log_clear = 17,
  MessageType_log_file = 18,
  MessageType_log_send_messages = 19,
  MessageType_MIN = MessageType_NONE,
  MessageType_MAX = MessageType_log_send_messages
};

inline const MessageType (&EnumValuesMessageType())[20] {
  static const MessageType values[] = {
    MessageType_NONE,
    MessageType_next_song,
    MessageType_prev_song,
    MessageType_play_song,
    MessageType_stop_song,
    MessageType_loop_current,
    MessageType_randomize_playlist,
    MessageType_request_added_urls,
    MessageType_request_select_song,
    MessageType_select_song,
    MessageType_request_add_urls,
    MessageType_reply_added_urls,
    MessageType_request_tracker_data,
    MessageType_tracker_data,
    MessageType_current_position,
    MessageType_song_metadata,
    MessageType_log_messages,
    MessageType_log_clear,
    MessageType_log_file,
    MessageType_log_send_messages
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[21] = {
    "NONE",
    "next_song",
    "prev_song",
    "play_song",
    "stop_song",
    "loop_current",
    "randomize_playlist",
    "request_added_urls",
    "request_select_song",
    "select_song",
    "request_add_urls",
    "reply_added_urls",
    "request_tracker_data",
    "tracker_data",
    "current_position",
    "song_metadata",
    "log_messages",
    "log_clear",
    "log_file",
    "log_send_messages",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (e < MessageType_NONE || e > MessageType_log_send_messages) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

bool VerifyMessageType(flatbuffers::Verifier &verifier, const void *obj, MessageType type);
bool VerifyMessageTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct HippoLoopCurrent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct HippoLoopCurrentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(HippoLoopCurrent::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit HippoLoopCurrentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoLoopCurrentBuilder &operator=(const HippoLoopCurrentBuilder &);
  flatbuffers::Offset<HippoLoopCurrent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoLoopCurrent>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoLoopCurrent> CreateHippoLoopCurrent(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  HippoLoopCurrentBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct HippoRandomizePlaylist FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct HippoRandomizePlaylistBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(HippoRandomizePlaylist::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit HippoRandomizePlaylistBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRandomizePlaylistBuilder &operator=(const HippoRandomizePlaylistBuilder &);
  flatbuffers::Offset<HippoRandomizePlaylist> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRandomizePlaylist>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRandomizePlaylist> CreateHippoRandomizePlaylist(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  HippoRandomizePlaylistBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct HippoNextSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoNextSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoNextSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoNextSongBuilder &operator=(const HippoNextSongBuilder &);
  flatbuffers::Offset<HippoNextSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoNextSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoNextSong> CreateHippoNextSong(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoNextSongBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoPrevSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoPrevSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoPrevSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoPrevSongBuilder &operator=(const HippoPrevSongBuilder &);
  flatbuffers::Offset<HippoPrevSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoPrevSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoPrevSong> CreateHippoPrevSong(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoPrevSongBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoPlaySong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoPlaySongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoPlaySongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoPlaySongBuilder &operator=(const HippoPlaySongBuilder &);
  flatbuffers::Offset<HippoPlaySong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoPlaySong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoPlaySong> CreateHippoPlaySong(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoPlaySongBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoStopSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoStopSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoStopSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoStopSongBuilder &operator=(const HippoStopSongBuilder &);
  flatbuffers::Offset<HippoStopSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoStopSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoStopSong> CreateHippoStopSong(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoStopSongBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoPauseSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct HippoPauseSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(HippoPauseSong::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit HippoPauseSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoPauseSongBuilder &operator=(const HippoPauseSongBuilder &);
  flatbuffers::Offset<HippoPauseSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoPauseSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoPauseSong> CreateHippoPauseSong(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  HippoPauseSongBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct HippoRequestAddedUrls FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoRequestAddedUrlsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoRequestAddedUrlsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRequestAddedUrlsBuilder &operator=(const HippoRequestAddedUrlsBuilder &);
  flatbuffers::Offset<HippoRequestAddedUrls> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRequestAddedUrls>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRequestAddedUrls> CreateHippoRequestAddedUrls(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoRequestAddedUrlsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoRemoveSelectedPlaylistEntries FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoRemoveSelectedPlaylistEntriesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoRemoveSelectedPlaylistEntriesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRemoveSelectedPlaylistEntriesBuilder &operator=(const HippoRemoveSelectedPlaylistEntriesBuilder &);
  flatbuffers::Offset<HippoRemoveSelectedPlaylistEntries> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRemoveSelectedPlaylistEntries>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRemoveSelectedPlaylistEntries> CreateHippoRemoveSelectedPlaylistEntries(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoRemoveSelectedPlaylistEntriesBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoRemovePlaylistEntries FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoRemovePlaylistEntriesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoRemovePlaylistEntriesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRemovePlaylistEntriesBuilder &operator=(const HippoRemovePlaylistEntriesBuilder &);
  flatbuffers::Offset<HippoRemovePlaylistEntries> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRemovePlaylistEntries>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRemovePlaylistEntries> CreateHippoRemovePlaylistEntries(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoRemovePlaylistEntriesBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoRequestSelectSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_PLAYLIST_INDEX = 6
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  int32_t playlist_index() const {
    return GetField<int32_t>(VT_PLAYLIST_INDEX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<int32_t>(verifier, VT_PLAYLIST_INDEX) &&
           verifier.EndTable();
  }
};

struct HippoRequestSelectSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(HippoRequestSelectSong::VT_PATH, path);
  }
  void add_playlist_index(int32_t playlist_index) {
    fbb_.AddElement<int32_t>(HippoRequestSelectSong::VT_PLAYLIST_INDEX, playlist_index, 0);
  }
  explicit HippoRequestSelectSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRequestSelectSongBuilder &operator=(const HippoRequestSelectSongBuilder &);
  flatbuffers::Offset<HippoRequestSelectSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRequestSelectSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRequestSelectSong> CreateHippoRequestSelectSong(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    int32_t playlist_index = 0) {
  HippoRequestSelectSongBuilder builder_(_fbb);
  builder_.add_playlist_index(playlist_index);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoRequestSelectSong> CreateHippoRequestSelectSongDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    int32_t playlist_index = 0) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return CreateHippoRequestSelectSong(
      _fbb,
      path__,
      playlist_index);
}

struct HippoRequestAddUrls FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URLS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *urls() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_URLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfStrings(urls()) &&
           verifier.EndTable();
  }
};

struct HippoRequestAddUrlsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_urls(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> urls) {
    fbb_.AddOffset(HippoRequestAddUrls::VT_URLS, urls);
  }
  explicit HippoRequestAddUrlsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRequestAddUrlsBuilder &operator=(const HippoRequestAddUrlsBuilder &);
  flatbuffers::Offset<HippoRequestAddUrls> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRequestAddUrls>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRequestAddUrls> CreateHippoRequestAddUrls(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> urls = 0) {
  HippoRequestAddUrlsBuilder builder_(_fbb);
  builder_.add_urls(urls);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoRequestAddUrls> CreateHippoRequestAddUrlsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *urls = nullptr) {
  auto urls__ = urls ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*urls) : 0;
  return CreateHippoRequestAddUrls(
      _fbb,
      urls__);
}

struct HippoLogMessages FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *messages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfStrings(messages()) &&
           verifier.EndTable();
  }
};

struct HippoLogMessagesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> messages) {
    fbb_.AddOffset(HippoLogMessages::VT_MESSAGES, messages);
  }
  explicit HippoLogMessagesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoLogMessagesBuilder &operator=(const HippoLogMessagesBuilder &);
  flatbuffers::Offset<HippoLogMessages> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoLogMessages>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoLogMessages> CreateHippoLogMessages(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> messages = 0) {
  HippoLogMessagesBuilder builder_(_fbb);
  builder_.add_messages(messages);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoLogMessages> CreateHippoLogMessagesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*messages) : 0;
  return CreateHippoLogMessages(
      _fbb,
      messages__);
}

struct HippoLogClear FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HippoLogClearBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit HippoLogClearBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoLogClearBuilder &operator=(const HippoLogClearBuilder &);
  flatbuffers::Offset<HippoLogClear> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoLogClear>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoLogClear> CreateHippoLogClear(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HippoLogClearBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HippoLogToFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILENAME = 4,
    VT_ENABLE = 6
  };
  const flatbuffers::String *filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  bool enable() const {
    return GetField<uint8_t>(VT_ENABLE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE) &&
           verifier.EndTable();
  }
};

struct HippoLogToFileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) {
    fbb_.AddOffset(HippoLogToFile::VT_FILENAME, filename);
  }
  void add_enable(bool enable) {
    fbb_.AddElement<uint8_t>(HippoLogToFile::VT_ENABLE, static_cast<uint8_t>(enable), 0);
  }
  explicit HippoLogToFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoLogToFileBuilder &operator=(const HippoLogToFileBuilder &);
  flatbuffers::Offset<HippoLogToFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoLogToFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoLogToFile> CreateHippoLogToFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> filename = 0,
    bool enable = false) {
  HippoLogToFileBuilder builder_(_fbb);
  builder_.add_filename(filename);
  builder_.add_enable(enable);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoLogToFile> CreateHippoLogToFileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *filename = nullptr,
    bool enable = false) {
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  return CreateHippoLogToFile(
      _fbb,
      filename__,
      enable);
}

struct HippoLogSendMessages FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLE = 4
  };
  bool enable() const {
    return GetField<uint8_t>(VT_ENABLE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE) &&
           verifier.EndTable();
  }
};

struct HippoLogSendMessagesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_enable(bool enable) {
    fbb_.AddElement<uint8_t>(HippoLogSendMessages::VT_ENABLE, static_cast<uint8_t>(enable), 0);
  }
  explicit HippoLogSendMessagesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoLogSendMessagesBuilder &operator=(const HippoLogSendMessagesBuilder &);
  flatbuffers::Offset<HippoLogSendMessages> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoLogSendMessages>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoLogSendMessages> CreateHippoLogSendMessages(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool enable = false) {
  HippoLogSendMessagesBuilder builder_(_fbb);
  builder_.add_enable(enable);
  return builder_.Finish();
}

struct HippoSongDescription FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_TITLE = 6,
    VT_DURATION = 8,
    VT_SONG_TYPE = 10,
    VT_ARTIST = 12,
    VT_DATE = 14,
    VT_AUTHORING_TOOL = 16
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  float duration() const {
    return GetField<float>(VT_DURATION, 0.0f);
  }
  const flatbuffers::String *song_type() const {
    return GetPointer<const flatbuffers::String *>(VT_SONG_TYPE);
  }
  const flatbuffers::String *artist() const {
    return GetPointer<const flatbuffers::String *>(VT_ARTIST);
  }
  const flatbuffers::String *date() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE);
  }
  const flatbuffers::String *authoring_tool() const {
    return GetPointer<const flatbuffers::String *>(VT_AUTHORING_TOOL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<float>(verifier, VT_DURATION) &&
           VerifyOffset(verifier, VT_SONG_TYPE) &&
           verifier.VerifyString(song_type()) &&
           VerifyOffset(verifier, VT_ARTIST) &&
           verifier.VerifyString(artist()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_AUTHORING_TOOL) &&
           verifier.VerifyString(authoring_tool()) &&
           verifier.EndTable();
  }
};

struct HippoSongDescriptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(HippoSongDescription::VT_PATH, path);
  }
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(HippoSongDescription::VT_TITLE, title);
  }
  void add_duration(float duration) {
    fbb_.AddElement<float>(HippoSongDescription::VT_DURATION, duration, 0.0f);
  }
  void add_song_type(flatbuffers::Offset<flatbuffers::String> song_type) {
    fbb_.AddOffset(HippoSongDescription::VT_SONG_TYPE, song_type);
  }
  void add_artist(flatbuffers::Offset<flatbuffers::String> artist) {
    fbb_.AddOffset(HippoSongDescription::VT_ARTIST, artist);
  }
  void add_date(flatbuffers::Offset<flatbuffers::String> date) {
    fbb_.AddOffset(HippoSongDescription::VT_DATE, date);
  }
  void add_authoring_tool(flatbuffers::Offset<flatbuffers::String> authoring_tool) {
    fbb_.AddOffset(HippoSongDescription::VT_AUTHORING_TOOL, authoring_tool);
  }
  explicit HippoSongDescriptionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoSongDescriptionBuilder &operator=(const HippoSongDescriptionBuilder &);
  flatbuffers::Offset<HippoSongDescription> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoSongDescription>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoSongDescription> CreateHippoSongDescription(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    float duration = 0.0f,
    flatbuffers::Offset<flatbuffers::String> song_type = 0,
    flatbuffers::Offset<flatbuffers::String> artist = 0,
    flatbuffers::Offset<flatbuffers::String> date = 0,
    flatbuffers::Offset<flatbuffers::String> authoring_tool = 0) {
  HippoSongDescriptionBuilder builder_(_fbb);
  builder_.add_authoring_tool(authoring_tool);
  builder_.add_date(date);
  builder_.add_artist(artist);
  builder_.add_song_type(song_type);
  builder_.add_duration(duration);
  builder_.add_title(title);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoSongDescription> CreateHippoSongDescriptionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    const char *title = nullptr,
    float duration = 0.0f,
    const char *song_type = nullptr,
    const char *artist = nullptr,
    const char *date = nullptr,
    const char *authoring_tool = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto song_type__ = song_type ? _fbb.CreateString(song_type) : 0;
  auto artist__ = artist ? _fbb.CreateString(artist) : 0;
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto authoring_tool__ = authoring_tool ? _fbb.CreateString(authoring_tool) : 0;
  return CreateHippoSongDescription(
      _fbb,
      path__,
      title__,
      duration,
      song_type__,
      artist__,
      date__,
      authoring_tool__);
}

struct HippoUrlEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_DESCRIPTION = 6
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const HippoSongDescription *description() const {
    return GetPointer<const HippoSongDescription *>(VT_DESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyTable(description()) &&
           verifier.EndTable();
  }
};

struct HippoUrlEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(HippoUrlEntry::VT_PATH, path);
  }
  void add_description(flatbuffers::Offset<HippoSongDescription> description) {
    fbb_.AddOffset(HippoUrlEntry::VT_DESCRIPTION, description);
  }
  explicit HippoUrlEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoUrlEntryBuilder &operator=(const HippoUrlEntryBuilder &);
  flatbuffers::Offset<HippoUrlEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoUrlEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoUrlEntry> CreateHippoUrlEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<HippoSongDescription> description = 0) {
  HippoUrlEntryBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoUrlEntry> CreateHippoUrlEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    flatbuffers::Offset<HippoSongDescription> description = 0) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return CreateHippoUrlEntry(
      _fbb,
      path__,
      description);
}

struct HippoSelectSong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTION = 4,
    VT_PLAYLIST_INDEX = 6
  };
  const HippoSongDescription *description() const {
    return GetPointer<const HippoSongDescription *>(VT_DESCRIPTION);
  }
  int32_t playlist_index() const {
    return GetField<int32_t>(VT_PLAYLIST_INDEX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyTable(description()) &&
           VerifyField<int32_t>(verifier, VT_PLAYLIST_INDEX) &&
           verifier.EndTable();
  }
};

struct HippoSelectSongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_description(flatbuffers::Offset<HippoSongDescription> description) {
    fbb_.AddOffset(HippoSelectSong::VT_DESCRIPTION, description);
  }
  void add_playlist_index(int32_t playlist_index) {
    fbb_.AddElement<int32_t>(HippoSelectSong::VT_PLAYLIST_INDEX, playlist_index, 0);
  }
  explicit HippoSelectSongBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoSelectSongBuilder &operator=(const HippoSelectSongBuilder &);
  flatbuffers::Offset<HippoSelectSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoSelectSong>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoSelectSong> CreateHippoSelectSong(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HippoSongDescription> description = 0,
    int32_t playlist_index = 0) {
  HippoSelectSongBuilder builder_(_fbb);
  builder_.add_playlist_index(playlist_index);
  builder_.add_description(description);
  return builder_.Finish();
}

struct HippoReplyAddedUrls FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_URLS = 6
  };
  int32_t index() const {
    return GetField<int32_t>(VT_INDEX, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<HippoUrlEntry>> *urls() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HippoUrlEntry>> *>(VT_URLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INDEX) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfTables(urls()) &&
           verifier.EndTable();
  }
};

struct HippoReplyAddedUrlsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_index(int32_t index) {
    fbb_.AddElement<int32_t>(HippoReplyAddedUrls::VT_INDEX, index, 0);
  }
  void add_urls(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoUrlEntry>>> urls) {
    fbb_.AddOffset(HippoReplyAddedUrls::VT_URLS, urls);
  }
  explicit HippoReplyAddedUrlsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoReplyAddedUrlsBuilder &operator=(const HippoReplyAddedUrlsBuilder &);
  flatbuffers::Offset<HippoReplyAddedUrls> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoReplyAddedUrls>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoReplyAddedUrls> CreateHippoReplyAddedUrls(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t index = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoUrlEntry>>> urls = 0) {
  HippoReplyAddedUrlsBuilder builder_(_fbb);
  builder_.add_urls(urls);
  builder_.add_index(index);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoReplyAddedUrls> CreateHippoReplyAddedUrlsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t index = 0,
    const std::vector<flatbuffers::Offset<HippoUrlEntry>> *urls = nullptr) {
  auto urls__ = urls ? _fbb.CreateVector<flatbuffers::Offset<HippoUrlEntry>>(*urls) : 0;
  return CreateHippoReplyAddedUrls(
      _fbb,
      index,
      urls__);
}

struct HippoRequestTrackerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATTERN = 4
  };
  int32_t pattern() const {
    return GetField<int32_t>(VT_PATTERN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PATTERN) &&
           verifier.EndTable();
  }
};

struct HippoRequestTrackerDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pattern(int32_t pattern) {
    fbb_.AddElement<int32_t>(HippoRequestTrackerData::VT_PATTERN, pattern, 0);
  }
  explicit HippoRequestTrackerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRequestTrackerDataBuilder &operator=(const HippoRequestTrackerDataBuilder &);
  flatbuffers::Offset<HippoRequestTrackerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRequestTrackerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRequestTrackerData> CreateHippoRequestTrackerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pattern = 0) {
  HippoRequestTrackerDataBuilder builder_(_fbb);
  builder_.add_pattern(pattern);
  return builder_.Finish();
}

struct HippoRowData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTE = 4,
    VT_INSTRUMENT = 6,
    VT_VOLUMEFFECT = 8,
    VT_EFFECT = 10,
    VT_VOLUME = 12,
    VT_PARAMETER = 14
  };
  const flatbuffers::String *note() const {
    return GetPointer<const flatbuffers::String *>(VT_NOTE);
  }
  const flatbuffers::String *instrument() const {
    return GetPointer<const flatbuffers::String *>(VT_INSTRUMENT);
  }
  const flatbuffers::String *volumeffect() const {
    return GetPointer<const flatbuffers::String *>(VT_VOLUMEFFECT);
  }
  const flatbuffers::String *effect() const {
    return GetPointer<const flatbuffers::String *>(VT_EFFECT);
  }
  const flatbuffers::String *volume() const {
    return GetPointer<const flatbuffers::String *>(VT_VOLUME);
  }
  const flatbuffers::String *parameter() const {
    return GetPointer<const flatbuffers::String *>(VT_PARAMETER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTE) &&
           verifier.VerifyString(note()) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyOffset(verifier, VT_VOLUMEFFECT) &&
           verifier.VerifyString(volumeffect()) &&
           VerifyOffset(verifier, VT_EFFECT) &&
           verifier.VerifyString(effect()) &&
           VerifyOffset(verifier, VT_VOLUME) &&
           verifier.VerifyString(volume()) &&
           VerifyOffset(verifier, VT_PARAMETER) &&
           verifier.VerifyString(parameter()) &&
           verifier.EndTable();
  }
};

struct HippoRowDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_note(flatbuffers::Offset<flatbuffers::String> note) {
    fbb_.AddOffset(HippoRowData::VT_NOTE, note);
  }
  void add_instrument(flatbuffers::Offset<flatbuffers::String> instrument) {
    fbb_.AddOffset(HippoRowData::VT_INSTRUMENT, instrument);
  }
  void add_volumeffect(flatbuffers::Offset<flatbuffers::String> volumeffect) {
    fbb_.AddOffset(HippoRowData::VT_VOLUMEFFECT, volumeffect);
  }
  void add_effect(flatbuffers::Offset<flatbuffers::String> effect) {
    fbb_.AddOffset(HippoRowData::VT_EFFECT, effect);
  }
  void add_volume(flatbuffers::Offset<flatbuffers::String> volume) {
    fbb_.AddOffset(HippoRowData::VT_VOLUME, volume);
  }
  void add_parameter(flatbuffers::Offset<flatbuffers::String> parameter) {
    fbb_.AddOffset(HippoRowData::VT_PARAMETER, parameter);
  }
  explicit HippoRowDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoRowDataBuilder &operator=(const HippoRowDataBuilder &);
  flatbuffers::Offset<HippoRowData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoRowData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoRowData> CreateHippoRowData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> note = 0,
    flatbuffers::Offset<flatbuffers::String> instrument = 0,
    flatbuffers::Offset<flatbuffers::String> volumeffect = 0,
    flatbuffers::Offset<flatbuffers::String> effect = 0,
    flatbuffers::Offset<flatbuffers::String> volume = 0,
    flatbuffers::Offset<flatbuffers::String> parameter = 0) {
  HippoRowDataBuilder builder_(_fbb);
  builder_.add_parameter(parameter);
  builder_.add_volume(volume);
  builder_.add_effect(effect);
  builder_.add_volumeffect(volumeffect);
  builder_.add_instrument(instrument);
  builder_.add_note(note);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoRowData> CreateHippoRowDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *note = nullptr,
    const char *instrument = nullptr,
    const char *volumeffect = nullptr,
    const char *effect = nullptr,
    const char *volume = nullptr,
    const char *parameter = nullptr) {
  auto note__ = note ? _fbb.CreateString(note) : 0;
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  auto volumeffect__ = volumeffect ? _fbb.CreateString(volumeffect) : 0;
  auto effect__ = effect ? _fbb.CreateString(effect) : 0;
  auto volume__ = volume ? _fbb.CreateString(volume) : 0;
  auto parameter__ = parameter ? _fbb.CreateString(parameter) : 0;
  return CreateHippoRowData(
      _fbb,
      note__,
      instrument__,
      volumeffect__,
      effect__,
      volume__,
      parameter__);
}

struct HippoSongMetadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URL = 4,
    VT_TITLE = 6,
    VT_SONG_TYPE = 8,
    VT_LENGTH = 10,
    VT_AUTHORING_TOOL = 12,
    VT_ARTIST = 14,
    VT_DATE = 16,
    VT_MESSAGE = 18,
    VT_SAMPLES = 20,
    VT_INSTRUMENTS = 22
  };
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *song_type() const {
    return GetPointer<const flatbuffers::String *>(VT_SONG_TYPE);
  }
  float length() const {
    return GetField<float>(VT_LENGTH, 0.0f);
  }
  const flatbuffers::String *authoring_tool() const {
    return GetPointer<const flatbuffers::String *>(VT_AUTHORING_TOOL);
  }
  const flatbuffers::String *artist() const {
    return GetPointer<const flatbuffers::String *>(VT_ARTIST);
  }
  const flatbuffers::String *date() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *samples() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_SAMPLES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *instruments() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INSTRUMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_SONG_TYPE) &&
           verifier.VerifyString(song_type()) &&
           VerifyField<float>(verifier, VT_LENGTH) &&
           VerifyOffset(verifier, VT_AUTHORING_TOOL) &&
           verifier.VerifyString(authoring_tool()) &&
           VerifyOffset(verifier, VT_ARTIST) &&
           verifier.VerifyString(artist()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyOffset(verifier, VT_SAMPLES) &&
           verifier.VerifyVector(samples()) &&
           verifier.VerifyVectorOfStrings(samples()) &&
           VerifyOffset(verifier, VT_INSTRUMENTS) &&
           verifier.VerifyVector(instruments()) &&
           verifier.VerifyVectorOfStrings(instruments()) &&
           verifier.EndTable();
  }
};

struct HippoSongMetadataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(HippoSongMetadata::VT_URL, url);
  }
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(HippoSongMetadata::VT_TITLE, title);
  }
  void add_song_type(flatbuffers::Offset<flatbuffers::String> song_type) {
    fbb_.AddOffset(HippoSongMetadata::VT_SONG_TYPE, song_type);
  }
  void add_length(float length) {
    fbb_.AddElement<float>(HippoSongMetadata::VT_LENGTH, length, 0.0f);
  }
  void add_authoring_tool(flatbuffers::Offset<flatbuffers::String> authoring_tool) {
    fbb_.AddOffset(HippoSongMetadata::VT_AUTHORING_TOOL, authoring_tool);
  }
  void add_artist(flatbuffers::Offset<flatbuffers::String> artist) {
    fbb_.AddOffset(HippoSongMetadata::VT_ARTIST, artist);
  }
  void add_date(flatbuffers::Offset<flatbuffers::String> date) {
    fbb_.AddOffset(HippoSongMetadata::VT_DATE, date);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(HippoSongMetadata::VT_MESSAGE, message);
  }
  void add_samples(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> samples) {
    fbb_.AddOffset(HippoSongMetadata::VT_SAMPLES, samples);
  }
  void add_instruments(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> instruments) {
    fbb_.AddOffset(HippoSongMetadata::VT_INSTRUMENTS, instruments);
  }
  explicit HippoSongMetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoSongMetadataBuilder &operator=(const HippoSongMetadataBuilder &);
  flatbuffers::Offset<HippoSongMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoSongMetadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoSongMetadata> CreateHippoSongMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> song_type = 0,
    float length = 0.0f,
    flatbuffers::Offset<flatbuffers::String> authoring_tool = 0,
    flatbuffers::Offset<flatbuffers::String> artist = 0,
    flatbuffers::Offset<flatbuffers::String> date = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> samples = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> instruments = 0) {
  HippoSongMetadataBuilder builder_(_fbb);
  builder_.add_instruments(instruments);
  builder_.add_samples(samples);
  builder_.add_message(message);
  builder_.add_date(date);
  builder_.add_artist(artist);
  builder_.add_authoring_tool(authoring_tool);
  builder_.add_length(length);
  builder_.add_song_type(song_type);
  builder_.add_title(title);
  builder_.add_url(url);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoSongMetadata> CreateHippoSongMetadataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr,
    const char *title = nullptr,
    const char *song_type = nullptr,
    float length = 0.0f,
    const char *authoring_tool = nullptr,
    const char *artist = nullptr,
    const char *date = nullptr,
    const char *message = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *samples = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *instruments = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto song_type__ = song_type ? _fbb.CreateString(song_type) : 0;
  auto authoring_tool__ = authoring_tool ? _fbb.CreateString(authoring_tool) : 0;
  auto artist__ = artist ? _fbb.CreateString(artist) : 0;
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  auto samples__ = samples ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*samples) : 0;
  auto instruments__ = instruments ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*instruments) : 0;
  return CreateHippoSongMetadata(
      _fbb,
      url__,
      title__,
      song_type__,
      length,
      authoring_tool__,
      artist__,
      date__,
      message__,
      samples__,
      instruments__);
}

struct HippoTrackerChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROW_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<HippoRowData>> *row_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HippoRowData>> *>(VT_ROW_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROW_DATA) &&
           verifier.VerifyVector(row_data()) &&
           verifier.VerifyVectorOfTables(row_data()) &&
           verifier.EndTable();
  }
};

struct HippoTrackerChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_row_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoRowData>>> row_data) {
    fbb_.AddOffset(HippoTrackerChannel::VT_ROW_DATA, row_data);
  }
  explicit HippoTrackerChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoTrackerChannelBuilder &operator=(const HippoTrackerChannelBuilder &);
  flatbuffers::Offset<HippoTrackerChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoTrackerChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoTrackerChannel> CreateHippoTrackerChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoRowData>>> row_data = 0) {
  HippoTrackerChannelBuilder builder_(_fbb);
  builder_.add_row_data(row_data);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoTrackerChannel> CreateHippoTrackerChannelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<HippoRowData>> *row_data = nullptr) {
  auto row_data__ = row_data ? _fbb.CreateVector<flatbuffers::Offset<HippoRowData>>(*row_data) : 0;
  return CreateHippoTrackerChannel(
      _fbb,
      row_data__);
}

struct HippoTrackerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PATTERN = 6,
    VT_CURRENT_ROW = 8,
    VT_CHANNELS = 10
  };
  HippoTrackerType type() const {
    return static_cast<HippoTrackerType>(GetField<int8_t>(VT_TYPE, 0));
  }
  int32_t pattern() const {
    return GetField<int32_t>(VT_PATTERN, 0);
  }
  int32_t current_row() const {
    return GetField<int32_t>(VT_CURRENT_ROW, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<HippoTrackerChannel>> *channels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HippoTrackerChannel>> *>(VT_CHANNELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_PATTERN) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_ROW) &&
           VerifyOffset(verifier, VT_CHANNELS) &&
           verifier.VerifyVector(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           verifier.EndTable();
  }
};

struct HippoTrackerDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(HippoTrackerType type) {
    fbb_.AddElement<int8_t>(HippoTrackerData::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_pattern(int32_t pattern) {
    fbb_.AddElement<int32_t>(HippoTrackerData::VT_PATTERN, pattern, 0);
  }
  void add_current_row(int32_t current_row) {
    fbb_.AddElement<int32_t>(HippoTrackerData::VT_CURRENT_ROW, current_row, 0);
  }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoTrackerChannel>>> channels) {
    fbb_.AddOffset(HippoTrackerData::VT_CHANNELS, channels);
  }
  explicit HippoTrackerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoTrackerDataBuilder &operator=(const HippoTrackerDataBuilder &);
  flatbuffers::Offset<HippoTrackerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoTrackerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoTrackerData> CreateHippoTrackerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    HippoTrackerType type = HippoTrackerType_Regular,
    int32_t pattern = 0,
    int32_t current_row = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HippoTrackerChannel>>> channels = 0) {
  HippoTrackerDataBuilder builder_(_fbb);
  builder_.add_channels(channels);
  builder_.add_current_row(current_row);
  builder_.add_pattern(pattern);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoTrackerData> CreateHippoTrackerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    HippoTrackerType type = HippoTrackerType_Regular,
    int32_t pattern = 0,
    int32_t current_row = 0,
    const std::vector<flatbuffers::Offset<HippoTrackerChannel>> *channels = nullptr) {
  auto channels__ = channels ? _fbb.CreateVector<flatbuffers::Offset<HippoTrackerChannel>>(*channels) : 0;
  return CreateHippoTrackerData(
      _fbb,
      type,
      pattern,
      current_row,
      channels__);
}

struct HippoCurrentPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_CURRENT_PATTERN = 6,
    VT_CURRENT_ROW = 8,
    VT_CURRENT_SPEED = 10,
    VT_DURATION = 12
  };
  float position() const {
    return GetField<float>(VT_POSITION, 0.0f);
  }
  int32_t current_pattern() const {
    return GetField<int32_t>(VT_CURRENT_PATTERN, 0);
  }
  int32_t current_row() const {
    return GetField<int32_t>(VT_CURRENT_ROW, 0);
  }
  int32_t current_speed() const {
    return GetField<int32_t>(VT_CURRENT_SPEED, 0);
  }
  float duration() const {
    return GetField<float>(VT_DURATION, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_POSITION) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_PATTERN) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_ROW) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_SPEED) &&
           VerifyField<float>(verifier, VT_DURATION) &&
           verifier.EndTable();
  }
};

struct HippoCurrentPositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(float position) {
    fbb_.AddElement<float>(HippoCurrentPosition::VT_POSITION, position, 0.0f);
  }
  void add_current_pattern(int32_t current_pattern) {
    fbb_.AddElement<int32_t>(HippoCurrentPosition::VT_CURRENT_PATTERN, current_pattern, 0);
  }
  void add_current_row(int32_t current_row) {
    fbb_.AddElement<int32_t>(HippoCurrentPosition::VT_CURRENT_ROW, current_row, 0);
  }
  void add_current_speed(int32_t current_speed) {
    fbb_.AddElement<int32_t>(HippoCurrentPosition::VT_CURRENT_SPEED, current_speed, 0);
  }
  void add_duration(float duration) {
    fbb_.AddElement<float>(HippoCurrentPosition::VT_DURATION, duration, 0.0f);
  }
  explicit HippoCurrentPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoCurrentPositionBuilder &operator=(const HippoCurrentPositionBuilder &);
  flatbuffers::Offset<HippoCurrentPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoCurrentPosition>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoCurrentPosition> CreateHippoCurrentPosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    float position = 0.0f,
    int32_t current_pattern = 0,
    int32_t current_row = 0,
    int32_t current_speed = 0,
    float duration = 0.0f) {
  HippoCurrentPositionBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_current_speed(current_speed);
  builder_.add_current_row(current_row);
  builder_.add_current_pattern(current_pattern);
  builder_.add_position(position);
  return builder_.Finish();
}

struct HippoMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6,
    VT_USER_DATA = 8
  };
  MessageType message_type() const {
    return static_cast<MessageType>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  const HippoNextSong *message_as_next_song() const {
    return message_type() == MessageType_next_song ? static_cast<const HippoNextSong *>(message()) : nullptr;
  }
  const HippoPrevSong *message_as_prev_song() const {
    return message_type() == MessageType_prev_song ? static_cast<const HippoPrevSong *>(message()) : nullptr;
  }
  const HippoPlaySong *message_as_play_song() const {
    return message_type() == MessageType_play_song ? static_cast<const HippoPlaySong *>(message()) : nullptr;
  }
  const HippoStopSong *message_as_stop_song() const {
    return message_type() == MessageType_stop_song ? static_cast<const HippoStopSong *>(message()) : nullptr;
  }
  const HippoLoopCurrent *message_as_loop_current() const {
    return message_type() == MessageType_loop_current ? static_cast<const HippoLoopCurrent *>(message()) : nullptr;
  }
  const HippoRandomizePlaylist *message_as_randomize_playlist() const {
    return message_type() == MessageType_randomize_playlist ? static_cast<const HippoRandomizePlaylist *>(message()) : nullptr;
  }
  const HippoRequestAddedUrls *message_as_request_added_urls() const {
    return message_type() == MessageType_request_added_urls ? static_cast<const HippoRequestAddedUrls *>(message()) : nullptr;
  }
  const HippoRequestSelectSong *message_as_request_select_song() const {
    return message_type() == MessageType_request_select_song ? static_cast<const HippoRequestSelectSong *>(message()) : nullptr;
  }
  const HippoSelectSong *message_as_select_song() const {
    return message_type() == MessageType_select_song ? static_cast<const HippoSelectSong *>(message()) : nullptr;
  }
  const HippoRequestAddUrls *message_as_request_add_urls() const {
    return message_type() == MessageType_request_add_urls ? static_cast<const HippoRequestAddUrls *>(message()) : nullptr;
  }
  const HippoReplyAddedUrls *message_as_reply_added_urls() const {
    return message_type() == MessageType_reply_added_urls ? static_cast<const HippoReplyAddedUrls *>(message()) : nullptr;
  }
  const HippoRequestSelectSong *message_as_request_tracker_data() const {
    return message_type() == MessageType_request_tracker_data ? static_cast<const HippoRequestSelectSong *>(message()) : nullptr;
  }
  const HippoTrackerData *message_as_tracker_data() const {
    return message_type() == MessageType_tracker_data ? static_cast<const HippoTrackerData *>(message()) : nullptr;
  }
  const HippoCurrentPosition *message_as_current_position() const {
    return message_type() == MessageType_current_position ? static_cast<const HippoCurrentPosition *>(message()) : nullptr;
  }
  const HippoSongMetadata *message_as_song_metadata() const {
    return message_type() == MessageType_song_metadata ? static_cast<const HippoSongMetadata *>(message()) : nullptr;
  }
  const HippoLogMessages *message_as_log_messages() const {
    return message_type() == MessageType_log_messages ? static_cast<const HippoLogMessages *>(message()) : nullptr;
  }
  const HippoLogClear *message_as_log_clear() const {
    return message_type() == MessageType_log_clear ? static_cast<const HippoLogClear *>(message()) : nullptr;
  }
  const HippoLogToFile *message_as_log_file() const {
    return message_type() == MessageType_log_file ? static_cast<const HippoLogToFile *>(message()) : nullptr;
  }
  const HippoLogSendMessages *message_as_log_send_messages() const {
    return message_type() == MessageType_log_send_messages ? static_cast<const HippoLogSendMessages *>(message()) : nullptr;
  }
  const flatbuffers::String *user_data() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMessageType(verifier, message(), message_type()) &&
           VerifyOffset(verifier, VT_USER_DATA) &&
           verifier.VerifyString(user_data()) &&
           verifier.EndTable();
  }
};

struct HippoMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(MessageType message_type) {
    fbb_.AddElement<uint8_t>(HippoMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(HippoMessage::VT_MESSAGE, message);
  }
  void add_user_data(flatbuffers::Offset<flatbuffers::String> user_data) {
    fbb_.AddOffset(HippoMessage::VT_USER_DATA, user_data);
  }
  explicit HippoMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HippoMessageBuilder &operator=(const HippoMessageBuilder &);
  flatbuffers::Offset<HippoMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HippoMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<HippoMessage> CreateHippoMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageType message_type = MessageType_NONE,
    flatbuffers::Offset<void> message = 0,
    flatbuffers::Offset<flatbuffers::String> user_data = 0) {
  HippoMessageBuilder builder_(_fbb);
  builder_.add_user_data(user_data);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<HippoMessage> CreateHippoMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageType message_type = MessageType_NONE,
    flatbuffers::Offset<void> message = 0,
    const char *user_data = nullptr) {
  auto user_data__ = user_data ? _fbb.CreateString(user_data) : 0;
  return CreateHippoMessage(
      _fbb,
      message_type,
      message,
      user_data__);
}

inline bool VerifyMessageType(flatbuffers::Verifier &verifier, const void *obj, MessageType type) {
  switch (type) {
    case MessageType_NONE: {
      return true;
    }
    case MessageType_next_song: {
      auto ptr = reinterpret_cast<const HippoNextSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_prev_song: {
      auto ptr = reinterpret_cast<const HippoPrevSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_play_song: {
      auto ptr = reinterpret_cast<const HippoPlaySong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_stop_song: {
      auto ptr = reinterpret_cast<const HippoStopSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_loop_current: {
      auto ptr = reinterpret_cast<const HippoLoopCurrent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_randomize_playlist: {
      auto ptr = reinterpret_cast<const HippoRandomizePlaylist *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_request_added_urls: {
      auto ptr = reinterpret_cast<const HippoRequestAddedUrls *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_request_select_song: {
      auto ptr = reinterpret_cast<const HippoRequestSelectSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_select_song: {
      auto ptr = reinterpret_cast<const HippoSelectSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_request_add_urls: {
      auto ptr = reinterpret_cast<const HippoRequestAddUrls *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_reply_added_urls: {
      auto ptr = reinterpret_cast<const HippoReplyAddedUrls *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_request_tracker_data: {
      auto ptr = reinterpret_cast<const HippoRequestSelectSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_tracker_data: {
      auto ptr = reinterpret_cast<const HippoTrackerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_current_position: {
      auto ptr = reinterpret_cast<const HippoCurrentPosition *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_song_metadata: {
      auto ptr = reinterpret_cast<const HippoSongMetadata *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_log_messages: {
      auto ptr = reinterpret_cast<const HippoLogMessages *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_log_clear: {
      auto ptr = reinterpret_cast<const HippoLogClear *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_log_file: {
      auto ptr = reinterpret_cast<const HippoLogToFile *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_log_send_messages: {
      auto ptr = reinterpret_cast<const HippoLogSendMessages *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMessageTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageType(
        verifier,  values->Get(i), types->GetEnum<MessageType>(i))) {
      return false;
    }
  }
  return true;
}

inline const HippoMessage *GetHippoMessage(const void *buf) {
  return flatbuffers::GetRoot<HippoMessage>(buf);
}

inline const HippoMessage *GetSizePrefixedHippoMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<HippoMessage>(buf);
}

inline bool VerifyHippoMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<HippoMessage>(nullptr);
}

inline bool VerifySizePrefixedHippoMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<HippoMessage>(nullptr);
}

inline void FinishHippoMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<HippoMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHippoMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<HippoMessage> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_HIPPOMESSAGES_H_
