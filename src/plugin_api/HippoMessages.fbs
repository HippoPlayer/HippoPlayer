// Messages internal and external messages based on Flatbuffers

table HippoNextSong {
}

table HippoPrevSong {
}

table HippoPlaySong {
}

table HippoStopSong {
}

table HippoRequestSelectSong {
  name: string;
}

table HippoRequestAddUrls {
  urls: [string];
}

table HippoUrlEntry {
  path: string;
  title: string;
  length: float;
}

table HippoSelectSong {
    title: string;
}

table HippoReplyAddedUrls {
  urls: [HippoUrlEntry];
}

command_note
command_instrument
command_volumeffect
command_effect
command_volume
command_parameter

// Row data for the tracker
table HippoRowData {
  note: string;
  instrument: string;
  volumeffect: string;
  effect: string;
  volume: string;
  parameter: string
}

table HippoTrackerChannel {
   row_data: [HippoRowData];
}


// Tracker type
// Regular for tracker formats such as protracker,xm,etc
// Hardware based notes and such that gets sent to the hardware which means it's a contiguous streams
// of notes

enum HippoTrackerType:byte { Regular, Hardware }

// Data used for tracker display provided by current backend

table HippoTrackerData {
    type: HippoTrackerType; (required)
    channels: [HippoTrackerChannel];
}

// This is for the current position for a playing song. If it's tracker based current pattern
// and such can be written here but is optional

table HippoCurrentPosition {
  position: float;
  current_pattern: int;
  current_row: int;
  current_speed: int;
  duration: float;
}

union MessageType {
  next_song: HippoNextSong,
  prev_song: HippoPrevSong,
  play_song: HippoPlaySong,
  stop_song: HippoStopSong,

  request_select_song: HippoRequestSelectSong,
  select_song: HippoSelectSong,

  request_add_urls: HippoRequestAddUrls,
  reply_added_urls: HippoReplyAddedUrls,
}


table HippoMessage {
  message: MessageType;
  user_data: string;
}

root_type HippoMessage;
