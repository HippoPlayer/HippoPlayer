/* automatically generated by rust-bindgen */

pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const RSIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const __mbstate_t)).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __mbstate_t))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { &(*(0 as *const __darwin_pthread_handler_rec)).__routine as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __darwin_pthread_handler_rec)).__arg as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __darwin_pthread_handler_rec)).__next as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_attr_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_attr_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_cond_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_cond_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_condattr_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_condattr_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_mutex_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_mutex_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_mutexattr_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_mutexattr_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_once_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_once_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_rwlock_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_rwlock_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_rwlockattr_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_rwlockattr_t)).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_t)).__sig as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_t)).__cleanup_stack as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const _opaque_pthread_t)).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type WUHandle = u64;
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPos {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_WUPos() {
    assert_eq!(
        ::std::mem::size_of::<WUPos>(),
        8usize,
        concat!("Size of: ", stringify!(WUPos))
    );
    assert_eq!(
        ::std::mem::align_of::<WUPos>(),
        4usize,
        concat!("Alignment of ", stringify!(WUPos))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUPos)).x as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUPos),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUPos)).y as *const _ as usize },
        4usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUPos),
            "::",
            stringify!(y)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WURect {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_WURect() {
    assert_eq!(
        ::std::mem::size_of::<WURect>(),
        16usize,
        concat!("Size of: ", stringify!(WURect))
    );
    assert_eq!(
        ::std::mem::align_of::<WURect>(),
        4usize,
        concat!("Alignment of ", stringify!(WURect))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WURect)).x as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WURect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WURect)).y as *const _ as usize },
        4usize,
        concat!(
            "Alignment of field: ",
            stringify!(WURect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WURect)).width as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WURect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WURect)).height as *const _ as usize },
        12usize,
        concat!(
            "Alignment of field: ",
            stringify!(WURect),
            "::",
            stringify!(height)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUColor {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_WUColor() {
    assert_eq!(
        ::std::mem::size_of::<WUColor>(),
        16usize,
        concat!("Size of: ", stringify!(WUColor))
    );
    assert_eq!(
        ::std::mem::align_of::<WUColor>(),
        4usize,
        concat!("Alignment of ", stringify!(WUColor))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUColor)).r as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUColor)).g as *const _ as usize },
        4usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUColor)).b as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUColor)).a as *const _ as usize },
        12usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUColor),
            "::",
            stringify!(a)
        )
    );
}
///
pub type WUPaintEvent = ::std::option::Option<
    unsafe extern "C" fn(painter: *const WUPainter, user_data: *mut ::std::os::raw::c_void),
>;
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUFont {
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(font: *const WUFont, size: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub set_font_from_memory: ::std::option::Option<
        unsafe extern "C" fn(
            font: *mut WUFont,
            data: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_from_filename: ::std::option::Option<
        unsafe extern "C" fn(
            font: *mut WUFont,
            filename: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_WUFont() {
    assert_eq!(
        ::std::mem::size_of::<WUFont>(),
        24usize,
        concat!("Size of: ", stringify!(WUFont))
    );
    assert_eq!(
        ::std::mem::align_of::<WUFont>(),
        8usize,
        concat!("Alignment of ", stringify!(WUFont))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUFont)).set_size as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUFont),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUFont)).set_font_from_memory as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUFont),
            "::",
            stringify!(set_font_from_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUFont)).set_font_from_filename as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUFont),
            "::",
            stringify!(set_font_from_filename)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUPainter {
    pub create_font: ::std::option::Option<unsafe extern "C" fn() -> *mut WUFont>,
    pub draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            painter: *const WUPainter,
            pos: WUPos,
            color: WUColor,
            text: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            font: *const WUFont,
        ),
    >,
    pub draw_rect: ::std::option::Option<
        unsafe extern "C" fn(painter: *const WUPainter, rect: WURect, color: WUColor),
    >,
}
#[test]
fn bindgen_test_layout_WUPainter() {
    assert_eq!(
        ::std::mem::size_of::<WUPainter>(),
        24usize,
        concat!("Size of: ", stringify!(WUPainter))
    );
    assert_eq!(
        ::std::mem::align_of::<WUPainter>(),
        8usize,
        concat!("Alignment of ", stringify!(WUPainter))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUPainter)).create_font as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUPainter),
            "::",
            stringify!(create_font)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUPainter)).draw_text as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUPainter),
            "::",
            stringify!(draw_text)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUPainter)).draw_rect as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUPainter),
            "::",
            stringify!(draw_rect)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUWindowFuncs {
    pub create: ::std::option::Option<unsafe extern "C" fn(parent: WUHandle) -> WUHandle>,
    pub set_paint_event: ::std::option::Option<
        unsafe extern "C" fn(
            window: WUHandle,
            user_data: *mut ::std::os::raw::c_void,
            event: WUPaintEvent,
        ),
    >,
}
#[test]
fn bindgen_test_layout_WUWindowFuncs() {
    assert_eq!(
        ::std::mem::size_of::<WUWindowFuncs>(),
        16usize,
        concat!("Size of: ", stringify!(WUWindowFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<WUWindowFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(WUWindowFuncs))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUWindowFuncs)).create as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUWindowFuncs),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUWindowFuncs)).set_paint_event as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUWindowFuncs),
            "::",
            stringify!(set_paint_event)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUWidgetFuncs {
    pub button_create: ::std::option::Option<unsafe extern "C" fn(parent: WUHandle) -> WUHandle>,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(handle: WUHandle, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    >,
}
#[test]
fn bindgen_test_layout_WUWidgetFuncs() {
    assert_eq!(
        ::std::mem::size_of::<WUWidgetFuncs>(),
        16usize,
        concat!("Size of: ", stringify!(WUWidgetFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<WUWidgetFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(WUWidgetFuncs))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUWidgetFuncs)).button_create as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUWidgetFuncs),
            "::",
            stringify!(button_create)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUWidgetFuncs)).set_size as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUWidgetFuncs),
            "::",
            stringify!(set_size)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUMainWindowFuncs {
    pub create: ::std::option::Option<unsafe extern "C" fn() -> WUHandle>,
}
#[test]
fn bindgen_test_layout_WUMainWindowFuncs() {
    assert_eq!(
        ::std::mem::size_of::<WUMainWindowFuncs>(),
        8usize,
        concat!("Size of: ", stringify!(WUMainWindowFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<WUMainWindowFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(WUMainWindowFuncs))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUMainWindowFuncs)).create as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUMainWindowFuncs),
            "::",
            stringify!(create)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUApplicationFuncs {
    pub create: ::std::option::Option<unsafe extern "C" fn() -> WUHandle>,
    pub run: ::std::option::Option<unsafe extern "C" fn(handle: WUHandle) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_WUApplicationFuncs() {
    assert_eq!(
        ::std::mem::size_of::<WUApplicationFuncs>(),
        16usize,
        concat!("Size of: ", stringify!(WUApplicationFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<WUApplicationFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(WUApplicationFuncs))
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUApplicationFuncs)).create as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUApplicationFuncs),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const WUApplicationFuncs)).run as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(WUApplicationFuncs),
            "::",
            stringify!(run)
        )
    );
}
///
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Wrui {
    pub api_version: u64,
    pub application_funcs: *const WUApplicationFuncs,
    pub window_funcs: *const WUWindowFuncs,
    pub main_window_funcs: *const WUMainWindowFuncs,
    pub widget_funcs: *const WUWidgetFuncs,
}
#[test]
fn bindgen_test_layout_Wrui() {
    assert_eq!(
        ::std::mem::size_of::<Wrui>(),
        40usize,
        concat!("Size of: ", stringify!(Wrui))
    );
    assert_eq!(
        ::std::mem::align_of::<Wrui>(),
        8usize,
        concat!("Alignment of ", stringify!(Wrui))
    );
    assert_eq!(
        unsafe { &(*(0 as *const Wrui)).api_version as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(Wrui),
            "::",
            stringify!(api_version)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const Wrui)).application_funcs as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(Wrui),
            "::",
            stringify!(application_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const Wrui)).window_funcs as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(Wrui),
            "::",
            stringify!(window_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const Wrui)).main_window_funcs as *const _ as usize },
        24usize,
        concat!(
            "Alignment of field: ",
            stringify!(Wrui),
            "::",
            stringify!(main_window_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const Wrui)).widget_funcs as *const _ as usize },
        32usize,
        concat!(
            "Alignment of field: ",
            stringify!(Wrui),
            "::",
            stringify!(widget_funcs)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_wrui_get"]
    pub fn wrui_get() -> *mut Wrui;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(0 as *const __va_list_tag)).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __va_list_tag)).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Alignment of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __va_list_tag)).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const __va_list_tag)).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
