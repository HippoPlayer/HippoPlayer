// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum HippoTrackerType {
  Regular = 0,
  Emulated = 1,

}

const ENUM_MIN_HIPPO_TRACKER_TYPE: i8 = 0;
const ENUM_MAX_HIPPO_TRACKER_TYPE: i8 = 1;

impl<'a> flatbuffers::Follow<'a> for HippoTrackerType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for HippoTrackerType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const HippoTrackerType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const HippoTrackerType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for HippoTrackerType {
    type Output = HippoTrackerType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<HippoTrackerType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_HIPPO_TRACKER_TYPE:[HippoTrackerType; 2] = [
  HippoTrackerType::Regular,
  HippoTrackerType::Emulated
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_HIPPO_TRACKER_TYPE:[&'static str; 2] = [
    "Regular",
    "Emulated"
];

pub fn enum_name_hippo_tracker_type(e: HippoTrackerType) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_HIPPO_TRACKER_TYPE[index as usize]
}

//////////////////////////////////////////////////////////////////////////////////////////
#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum MessageType {
  NONE = 0,
  next_song = 1,
  prev_song = 2,
  play_song = 3,
  stop_song = 4,
  loop_current = 5,
  randomize_playlist = 6,
  request_added_urls = 7,
  request_select_song = 8,
  select_song = 9,
  request_add_urls = 10,
  reply_added_urls = 11,
  request_tracker_data = 12,
  tracker_data = 13,
  current_position = 14,
  song_metadata = 15,
  log_messages = 16,
  log_clear = 17,
  log_file = 18,
  log_send_messages = 19,
  request_output_devices = 20,
  reply_output_devices = 21,
  select_output_device = 22,

}

const ENUM_MIN_MESSAGE_TYPE: u8 = 0;
const ENUM_MAX_MESSAGE_TYPE: u8 = 22;

impl<'a> flatbuffers::Follow<'a> for MessageType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for MessageType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const MessageType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const MessageType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for MessageType {
    type Output = MessageType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<MessageType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_MESSAGE_TYPE:[MessageType; 23] = [
  MessageType::NONE,
  MessageType::next_song,
  MessageType::prev_song,
  MessageType::play_song,
  MessageType::stop_song,
  MessageType::loop_current,
  MessageType::randomize_playlist,
  MessageType::request_added_urls,
  MessageType::request_select_song,
  MessageType::select_song,
  MessageType::request_add_urls,
  MessageType::reply_added_urls,
  MessageType::request_tracker_data,
  MessageType::tracker_data,
  MessageType::current_position,
  MessageType::song_metadata,
  MessageType::log_messages,
  MessageType::log_clear,
  MessageType::log_file,
  MessageType::log_send_messages,
  MessageType::request_output_devices,
  MessageType::reply_output_devices,
  MessageType::select_output_device
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_MESSAGE_TYPE:[&'static str; 23] = [
    "NONE",
    "next_song",
    "prev_song",
    "play_song",
    "stop_song",
    "loop_current",
    "randomize_playlist",
    "request_added_urls",
    "request_select_song",
    "select_song",
    "request_add_urls",
    "reply_added_urls",
    "request_tracker_data",
    "tracker_data",
    "current_position",
    "song_metadata",
    "log_messages",
    "log_clear",
    "log_file",
    "log_send_messages",
    "request_output_devices",
    "reply_output_devices",
    "select_output_device"
];

pub fn enum_name_message_type(e: MessageType) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_MESSAGE_TYPE[index as usize]
}

pub struct MessageTypeUnionTableOffset {}
pub enum HippoLoopCurrentOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoLoopCurrent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoLoopCurrent<'a> {
    type Inner = HippoLoopCurrent<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoLoopCurrent<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoLoopCurrent {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoLoopCurrentArgs) -> flatbuffers::WIPOffset<HippoLoopCurrent<'bldr>> {
      let mut builder = HippoLoopCurrentBuilder::new(_fbb);
      builder.add_state(args.state);
      builder.finish()
    }

    pub const VT_STATE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn state(&self) -> bool {
    self._tab.get::<bool>(HippoLoopCurrent::VT_STATE, Some(false)).unwrap()
  }
}

pub struct HippoLoopCurrentArgs {
    pub state: bool,
}
impl<'a> Default for HippoLoopCurrentArgs {
    #[inline]
    fn default() -> Self {
        HippoLoopCurrentArgs {
            state: false,
        }
    }
}
pub struct HippoLoopCurrentBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoLoopCurrentBuilder<'a, 'b> {
  #[inline]
  pub fn add_state(&mut self, state: bool) {
    self.fbb_.push_slot::<bool>(HippoLoopCurrent::VT_STATE, state, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoLoopCurrentBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoLoopCurrentBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoLoopCurrent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRandomizePlaylistOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRandomizePlaylist<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRandomizePlaylist<'a> {
    type Inner = HippoRandomizePlaylist<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRandomizePlaylist<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRandomizePlaylist {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoRandomizePlaylistArgs) -> flatbuffers::WIPOffset<HippoRandomizePlaylist<'bldr>> {
      let mut builder = HippoRandomizePlaylistBuilder::new(_fbb);
      builder.add_state(args.state);
      builder.finish()
    }

    pub const VT_STATE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn state(&self) -> bool {
    self._tab.get::<bool>(HippoRandomizePlaylist::VT_STATE, Some(false)).unwrap()
  }
}

pub struct HippoRandomizePlaylistArgs {
    pub state: bool,
}
impl<'a> Default for HippoRandomizePlaylistArgs {
    #[inline]
    fn default() -> Self {
        HippoRandomizePlaylistArgs {
            state: false,
        }
    }
}
pub struct HippoRandomizePlaylistBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRandomizePlaylistBuilder<'a, 'b> {
  #[inline]
  pub fn add_state(&mut self, state: bool) {
    self.fbb_.push_slot::<bool>(HippoRandomizePlaylist::VT_STATE, state, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRandomizePlaylistBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRandomizePlaylistBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRandomizePlaylist<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoNextSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoNextSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoNextSong<'a> {
    type Inner = HippoNextSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoNextSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoNextSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoNextSongArgs) -> flatbuffers::WIPOffset<HippoNextSong<'bldr>> {
      let mut builder = HippoNextSongBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoNextSongArgs {
}
impl<'a> Default for HippoNextSongArgs {
    #[inline]
    fn default() -> Self {
        HippoNextSongArgs {
        }
    }
}
pub struct HippoNextSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoNextSongBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoNextSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoNextSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoNextSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoPrevSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoPrevSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoPrevSong<'a> {
    type Inner = HippoPrevSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoPrevSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoPrevSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoPrevSongArgs) -> flatbuffers::WIPOffset<HippoPrevSong<'bldr>> {
      let mut builder = HippoPrevSongBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoPrevSongArgs {
}
impl<'a> Default for HippoPrevSongArgs {
    #[inline]
    fn default() -> Self {
        HippoPrevSongArgs {
        }
    }
}
pub struct HippoPrevSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoPrevSongBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoPrevSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoPrevSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoPrevSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoPlaySongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoPlaySong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoPlaySong<'a> {
    type Inner = HippoPlaySong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoPlaySong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoPlaySong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoPlaySongArgs) -> flatbuffers::WIPOffset<HippoPlaySong<'bldr>> {
      let mut builder = HippoPlaySongBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoPlaySongArgs {
}
impl<'a> Default for HippoPlaySongArgs {
    #[inline]
    fn default() -> Self {
        HippoPlaySongArgs {
        }
    }
}
pub struct HippoPlaySongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoPlaySongBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoPlaySongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoPlaySongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoPlaySong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoStopSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoStopSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoStopSong<'a> {
    type Inner = HippoStopSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoStopSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoStopSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoStopSongArgs) -> flatbuffers::WIPOffset<HippoStopSong<'bldr>> {
      let mut builder = HippoStopSongBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoStopSongArgs {
}
impl<'a> Default for HippoStopSongArgs {
    #[inline]
    fn default() -> Self {
        HippoStopSongArgs {
        }
    }
}
pub struct HippoStopSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoStopSongBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoStopSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoStopSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoStopSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoPauseSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoPauseSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoPauseSong<'a> {
    type Inner = HippoPauseSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoPauseSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoPauseSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoPauseSongArgs) -> flatbuffers::WIPOffset<HippoPauseSong<'bldr>> {
      let mut builder = HippoPauseSongBuilder::new(_fbb);
      builder.add_state(args.state);
      builder.finish()
    }

    pub const VT_STATE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn state(&self) -> bool {
    self._tab.get::<bool>(HippoPauseSong::VT_STATE, Some(false)).unwrap()
  }
}

pub struct HippoPauseSongArgs {
    pub state: bool,
}
impl<'a> Default for HippoPauseSongArgs {
    #[inline]
    fn default() -> Self {
        HippoPauseSongArgs {
            state: false,
        }
    }
}
pub struct HippoPauseSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoPauseSongBuilder<'a, 'b> {
  #[inline]
  pub fn add_state(&mut self, state: bool) {
    self.fbb_.push_slot::<bool>(HippoPauseSong::VT_STATE, state, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoPauseSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoPauseSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoPauseSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRequestAddedUrlsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRequestAddedUrls<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRequestAddedUrls<'a> {
    type Inner = HippoRequestAddedUrls<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRequestAddedUrls<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRequestAddedUrls {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoRequestAddedUrlsArgs) -> flatbuffers::WIPOffset<HippoRequestAddedUrls<'bldr>> {
      let mut builder = HippoRequestAddedUrlsBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoRequestAddedUrlsArgs {
}
impl<'a> Default for HippoRequestAddedUrlsArgs {
    #[inline]
    fn default() -> Self {
        HippoRequestAddedUrlsArgs {
        }
    }
}
pub struct HippoRequestAddedUrlsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRequestAddedUrlsBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRequestAddedUrlsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRequestAddedUrlsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRequestAddedUrls<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRemoveSelectedPlaylistEntriesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRemoveSelectedPlaylistEntries<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRemoveSelectedPlaylistEntries<'a> {
    type Inner = HippoRemoveSelectedPlaylistEntries<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRemoveSelectedPlaylistEntries<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRemoveSelectedPlaylistEntries {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoRemoveSelectedPlaylistEntriesArgs) -> flatbuffers::WIPOffset<HippoRemoveSelectedPlaylistEntries<'bldr>> {
      let mut builder = HippoRemoveSelectedPlaylistEntriesBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoRemoveSelectedPlaylistEntriesArgs {
}
impl<'a> Default for HippoRemoveSelectedPlaylistEntriesArgs {
    #[inline]
    fn default() -> Self {
        HippoRemoveSelectedPlaylistEntriesArgs {
        }
    }
}
pub struct HippoRemoveSelectedPlaylistEntriesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRemoveSelectedPlaylistEntriesBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRemoveSelectedPlaylistEntriesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRemoveSelectedPlaylistEntriesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRemoveSelectedPlaylistEntries<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRemovePlaylistEntriesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRemovePlaylistEntries<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRemovePlaylistEntries<'a> {
    type Inner = HippoRemovePlaylistEntries<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRemovePlaylistEntries<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRemovePlaylistEntries {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoRemovePlaylistEntriesArgs) -> flatbuffers::WIPOffset<HippoRemovePlaylistEntries<'bldr>> {
      let mut builder = HippoRemovePlaylistEntriesBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoRemovePlaylistEntriesArgs {
}
impl<'a> Default for HippoRemovePlaylistEntriesArgs {
    #[inline]
    fn default() -> Self {
        HippoRemovePlaylistEntriesArgs {
        }
    }
}
pub struct HippoRemovePlaylistEntriesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRemovePlaylistEntriesBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRemovePlaylistEntriesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRemovePlaylistEntriesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRemovePlaylistEntries<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRequestSelectSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRequestSelectSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRequestSelectSong<'a> {
    type Inner = HippoRequestSelectSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRequestSelectSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRequestSelectSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoRequestSelectSongArgs<'args>) -> flatbuffers::WIPOffset<HippoRequestSelectSong<'bldr>> {
      let mut builder = HippoRequestSelectSongBuilder::new(_fbb);
      builder.add_playlist_index(args.playlist_index);
      if let Some(x) = args.path { builder.add_path(x); }
      builder.finish()
    }

    pub const VT_PATH: flatbuffers::VOffsetT = 4;
    pub const VT_PLAYLIST_INDEX: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRequestSelectSong::VT_PATH, None)
  }
  #[inline]
  pub fn playlist_index(&self) -> i32 {
    self._tab.get::<i32>(HippoRequestSelectSong::VT_PLAYLIST_INDEX, Some(0)).unwrap()
  }
}

pub struct HippoRequestSelectSongArgs<'a> {
    pub path: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub playlist_index: i32,
}
impl<'a> Default for HippoRequestSelectSongArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoRequestSelectSongArgs {
            path: None,
            playlist_index: 0,
        }
    }
}
pub struct HippoRequestSelectSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRequestSelectSongBuilder<'a, 'b> {
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRequestSelectSong::VT_PATH, path);
  }
  #[inline]
  pub fn add_playlist_index(&mut self, playlist_index: i32) {
    self.fbb_.push_slot::<i32>(HippoRequestSelectSong::VT_PLAYLIST_INDEX, playlist_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRequestSelectSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRequestSelectSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRequestSelectSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRequestAddUrlsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRequestAddUrls<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRequestAddUrls<'a> {
    type Inner = HippoRequestAddUrls<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRequestAddUrls<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRequestAddUrls {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoRequestAddUrlsArgs<'args>) -> flatbuffers::WIPOffset<HippoRequestAddUrls<'bldr>> {
      let mut builder = HippoRequestAddUrlsBuilder::new(_fbb);
      if let Some(x) = args.urls { builder.add_urls(x); }
      builder.finish()
    }

    pub const VT_URLS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn urls(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<&'a str>>>>(HippoRequestAddUrls::VT_URLS, None)
  }
}

pub struct HippoRequestAddUrlsArgs<'a> {
    pub urls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<&'a  str>>>>,
}
impl<'a> Default for HippoRequestAddUrlsArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoRequestAddUrlsArgs {
            urls: None,
        }
    }
}
pub struct HippoRequestAddUrlsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRequestAddUrlsBuilder<'a, 'b> {
  #[inline]
  pub fn add_urls(&mut self, urls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRequestAddUrls::VT_URLS, urls);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRequestAddUrlsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRequestAddUrlsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRequestAddUrls<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoLogMessagesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoLogMessages<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoLogMessages<'a> {
    type Inner = HippoLogMessages<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoLogMessages<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoLogMessages {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoLogMessagesArgs<'args>) -> flatbuffers::WIPOffset<HippoLogMessages<'bldr>> {
      let mut builder = HippoLogMessagesBuilder::new(_fbb);
      if let Some(x) = args.messages { builder.add_messages(x); }
      builder.finish()
    }

    pub const VT_MESSAGES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn messages(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<&'a str>>>>(HippoLogMessages::VT_MESSAGES, None)
  }
}

pub struct HippoLogMessagesArgs<'a> {
    pub messages: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<&'a  str>>>>,
}
impl<'a> Default for HippoLogMessagesArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoLogMessagesArgs {
            messages: None,
        }
    }
}
pub struct HippoLogMessagesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoLogMessagesBuilder<'a, 'b> {
  #[inline]
  pub fn add_messages(&mut self, messages: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoLogMessages::VT_MESSAGES, messages);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoLogMessagesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoLogMessagesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoLogMessages<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoLogClearOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoLogClear<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoLogClear<'a> {
    type Inner = HippoLogClear<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoLogClear<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoLogClear {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoLogClearArgs) -> flatbuffers::WIPOffset<HippoLogClear<'bldr>> {
      let mut builder = HippoLogClearBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoLogClearArgs {
}
impl<'a> Default for HippoLogClearArgs {
    #[inline]
    fn default() -> Self {
        HippoLogClearArgs {
        }
    }
}
pub struct HippoLogClearBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoLogClearBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoLogClearBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoLogClearBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoLogClear<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoLogToFileOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoLogToFile<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoLogToFile<'a> {
    type Inner = HippoLogToFile<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoLogToFile<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoLogToFile {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoLogToFileArgs<'args>) -> flatbuffers::WIPOffset<HippoLogToFile<'bldr>> {
      let mut builder = HippoLogToFileBuilder::new(_fbb);
      if let Some(x) = args.filename { builder.add_filename(x); }
      builder.add_enable(args.enable);
      builder.finish()
    }

    pub const VT_FILENAME: flatbuffers::VOffsetT = 4;
    pub const VT_ENABLE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoLogToFile::VT_FILENAME, None)
  }
  #[inline]
  pub fn enable(&self) -> bool {
    self._tab.get::<bool>(HippoLogToFile::VT_ENABLE, Some(false)).unwrap()
  }
}

pub struct HippoLogToFileArgs<'a> {
    pub filename: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub enable: bool,
}
impl<'a> Default for HippoLogToFileArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoLogToFileArgs {
            filename: None,
            enable: false,
        }
    }
}
pub struct HippoLogToFileBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoLogToFileBuilder<'a, 'b> {
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoLogToFile::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_enable(&mut self, enable: bool) {
    self.fbb_.push_slot::<bool>(HippoLogToFile::VT_ENABLE, enable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoLogToFileBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoLogToFileBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoLogToFile<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoLogSendMessagesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoLogSendMessages<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoLogSendMessages<'a> {
    type Inner = HippoLogSendMessages<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoLogSendMessages<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoLogSendMessages {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoLogSendMessagesArgs) -> flatbuffers::WIPOffset<HippoLogSendMessages<'bldr>> {
      let mut builder = HippoLogSendMessagesBuilder::new(_fbb);
      builder.add_enable(args.enable);
      builder.finish()
    }

    pub const VT_ENABLE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn enable(&self) -> bool {
    self._tab.get::<bool>(HippoLogSendMessages::VT_ENABLE, Some(false)).unwrap()
  }
}

pub struct HippoLogSendMessagesArgs {
    pub enable: bool,
}
impl<'a> Default for HippoLogSendMessagesArgs {
    #[inline]
    fn default() -> Self {
        HippoLogSendMessagesArgs {
            enable: false,
        }
    }
}
pub struct HippoLogSendMessagesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoLogSendMessagesBuilder<'a, 'b> {
  #[inline]
  pub fn add_enable(&mut self, enable: bool) {
    self.fbb_.push_slot::<bool>(HippoLogSendMessages::VT_ENABLE, enable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoLogSendMessagesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoLogSendMessagesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoLogSendMessages<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoSongDescriptionOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoSongDescription<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoSongDescription<'a> {
    type Inner = HippoSongDescription<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoSongDescription<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoSongDescription {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoSongDescriptionArgs<'args>) -> flatbuffers::WIPOffset<HippoSongDescription<'bldr>> {
      let mut builder = HippoSongDescriptionBuilder::new(_fbb);
      if let Some(x) = args.authoring_tool { builder.add_authoring_tool(x); }
      if let Some(x) = args.date { builder.add_date(x); }
      if let Some(x) = args.artist { builder.add_artist(x); }
      if let Some(x) = args.song_type { builder.add_song_type(x); }
      builder.add_duration(args.duration);
      if let Some(x) = args.title { builder.add_title(x); }
      if let Some(x) = args.path { builder.add_path(x); }
      builder.finish()
    }

    pub const VT_PATH: flatbuffers::VOffsetT = 4;
    pub const VT_TITLE: flatbuffers::VOffsetT = 6;
    pub const VT_DURATION: flatbuffers::VOffsetT = 8;
    pub const VT_SONG_TYPE: flatbuffers::VOffsetT = 10;
    pub const VT_ARTIST: flatbuffers::VOffsetT = 12;
    pub const VT_DATE: flatbuffers::VOffsetT = 14;
    pub const VT_AUTHORING_TOOL: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_PATH, None)
  }
  #[inline]
  pub fn title(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_TITLE, None)
  }
  #[inline]
  pub fn duration(&self) -> f32 {
    self._tab.get::<f32>(HippoSongDescription::VT_DURATION, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn song_type(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_SONG_TYPE, None)
  }
  #[inline]
  pub fn artist(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_ARTIST, None)
  }
  #[inline]
  pub fn date(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_DATE, None)
  }
  #[inline]
  pub fn authoring_tool(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongDescription::VT_AUTHORING_TOOL, None)
  }
}

pub struct HippoSongDescriptionArgs<'a> {
    pub path: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub title: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub duration: f32,
    pub song_type: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub artist: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub date: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub authoring_tool: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoSongDescriptionArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoSongDescriptionArgs {
            path: None,
            title: None,
            duration: 0.0,
            song_type: None,
            artist: None,
            date: None,
            authoring_tool: None,
        }
    }
}
pub struct HippoSongDescriptionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoSongDescriptionBuilder<'a, 'b> {
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_PATH, path);
  }
  #[inline]
  pub fn add_title(&mut self, title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_TITLE, title);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: f32) {
    self.fbb_.push_slot::<f32>(HippoSongDescription::VT_DURATION, duration, 0.0);
  }
  #[inline]
  pub fn add_song_type(&mut self, song_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_SONG_TYPE, song_type);
  }
  #[inline]
  pub fn add_artist(&mut self, artist: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_ARTIST, artist);
  }
  #[inline]
  pub fn add_date(&mut self, date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_DATE, date);
  }
  #[inline]
  pub fn add_authoring_tool(&mut self, authoring_tool: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongDescription::VT_AUTHORING_TOOL, authoring_tool);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoSongDescriptionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoSongDescriptionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoSongDescription<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoUrlEntryOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoUrlEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoUrlEntry<'a> {
    type Inner = HippoUrlEntry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoUrlEntry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoUrlEntry {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoUrlEntryArgs<'args>) -> flatbuffers::WIPOffset<HippoUrlEntry<'bldr>> {
      let mut builder = HippoUrlEntryBuilder::new(_fbb);
      if let Some(x) = args.description { builder.add_description(x); }
      if let Some(x) = args.path { builder.add_path(x); }
      builder.finish()
    }

    pub const VT_PATH: flatbuffers::VOffsetT = 4;
    pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoUrlEntry::VT_PATH, None)
  }
  #[inline]
  pub fn description(&self) -> Option<HippoSongDescription<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<HippoSongDescription<'a>>>(HippoUrlEntry::VT_DESCRIPTION, None)
  }
}

pub struct HippoUrlEntryArgs<'a> {
    pub path: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub description: Option<flatbuffers::WIPOffset<HippoSongDescription<'a >>>,
}
impl<'a> Default for HippoUrlEntryArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoUrlEntryArgs {
            path: None,
            description: None,
        }
    }
}
pub struct HippoUrlEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoUrlEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoUrlEntry::VT_PATH, path);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<HippoSongDescription<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HippoSongDescription>>(HippoUrlEntry::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoUrlEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoUrlEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoUrlEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoSelectSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoSelectSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoSelectSong<'a> {
    type Inner = HippoSelectSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoSelectSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoSelectSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoSelectSongArgs<'args>) -> flatbuffers::WIPOffset<HippoSelectSong<'bldr>> {
      let mut builder = HippoSelectSongBuilder::new(_fbb);
      builder.add_playlist_index(args.playlist_index);
      if let Some(x) = args.description { builder.add_description(x); }
      builder.finish()
    }

    pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 4;
    pub const VT_PLAYLIST_INDEX: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn description(&self) -> Option<HippoSongDescription<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<HippoSongDescription<'a>>>(HippoSelectSong::VT_DESCRIPTION, None)
  }
  #[inline]
  pub fn playlist_index(&self) -> i32 {
    self._tab.get::<i32>(HippoSelectSong::VT_PLAYLIST_INDEX, Some(0)).unwrap()
  }
}

pub struct HippoSelectSongArgs<'a> {
    pub description: Option<flatbuffers::WIPOffset<HippoSongDescription<'a >>>,
    pub playlist_index: i32,
}
impl<'a> Default for HippoSelectSongArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoSelectSongArgs {
            description: None,
            playlist_index: 0,
        }
    }
}
pub struct HippoSelectSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoSelectSongBuilder<'a, 'b> {
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<HippoSongDescription<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HippoSongDescription>>(HippoSelectSong::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_playlist_index(&mut self, playlist_index: i32) {
    self.fbb_.push_slot::<i32>(HippoSelectSong::VT_PLAYLIST_INDEX, playlist_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoSelectSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoSelectSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoSelectSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoReplyAddedUrlsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoReplyAddedUrls<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoReplyAddedUrls<'a> {
    type Inner = HippoReplyAddedUrls<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoReplyAddedUrls<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoReplyAddedUrls {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoReplyAddedUrlsArgs<'args>) -> flatbuffers::WIPOffset<HippoReplyAddedUrls<'bldr>> {
      let mut builder = HippoReplyAddedUrlsBuilder::new(_fbb);
      if let Some(x) = args.urls { builder.add_urls(x); }
      builder.add_index(args.index);
      builder.finish()
    }

    pub const VT_INDEX: flatbuffers::VOffsetT = 4;
    pub const VT_URLS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn index(&self) -> i32 {
    self._tab.get::<i32>(HippoReplyAddedUrls::VT_INDEX, Some(0)).unwrap()
  }
  #[inline]
  pub fn urls(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HippoUrlEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<HippoUrlEntry<'a>>>>>(HippoReplyAddedUrls::VT_URLS, None)
  }
}

pub struct HippoReplyAddedUrlsArgs<'a> {
    pub index: i32,
    pub urls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<HippoUrlEntry<'a >>>>>,
}
impl<'a> Default for HippoReplyAddedUrlsArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoReplyAddedUrlsArgs {
            index: 0,
            urls: None,
        }
    }
}
pub struct HippoReplyAddedUrlsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoReplyAddedUrlsBuilder<'a, 'b> {
  #[inline]
  pub fn add_index(&mut self, index: i32) {
    self.fbb_.push_slot::<i32>(HippoReplyAddedUrls::VT_INDEX, index, 0);
  }
  #[inline]
  pub fn add_urls(&mut self, urls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HippoUrlEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoReplyAddedUrls::VT_URLS, urls);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoReplyAddedUrlsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoReplyAddedUrlsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoReplyAddedUrls<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRequestTrackerDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRequestTrackerData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRequestTrackerData<'a> {
    type Inner = HippoRequestTrackerData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRequestTrackerData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRequestTrackerData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoRequestTrackerDataArgs) -> flatbuffers::WIPOffset<HippoRequestTrackerData<'bldr>> {
      let mut builder = HippoRequestTrackerDataBuilder::new(_fbb);
      builder.add_pattern(args.pattern);
      builder.finish()
    }

    pub const VT_PATTERN: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn pattern(&self) -> i32 {
    self._tab.get::<i32>(HippoRequestTrackerData::VT_PATTERN, Some(0)).unwrap()
  }
}

pub struct HippoRequestTrackerDataArgs {
    pub pattern: i32,
}
impl<'a> Default for HippoRequestTrackerDataArgs {
    #[inline]
    fn default() -> Self {
        HippoRequestTrackerDataArgs {
            pattern: 0,
        }
    }
}
pub struct HippoRequestTrackerDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRequestTrackerDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_pattern(&mut self, pattern: i32) {
    self.fbb_.push_slot::<i32>(HippoRequestTrackerData::VT_PATTERN, pattern, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRequestTrackerDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRequestTrackerDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRequestTrackerData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRowDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRowData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRowData<'a> {
    type Inner = HippoRowData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRowData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRowData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoRowDataArgs<'args>) -> flatbuffers::WIPOffset<HippoRowData<'bldr>> {
      let mut builder = HippoRowDataBuilder::new(_fbb);
      if let Some(x) = args.parameter { builder.add_parameter(x); }
      if let Some(x) = args.volume { builder.add_volume(x); }
      if let Some(x) = args.effect { builder.add_effect(x); }
      if let Some(x) = args.volumeffect { builder.add_volumeffect(x); }
      if let Some(x) = args.instrument { builder.add_instrument(x); }
      if let Some(x) = args.note { builder.add_note(x); }
      builder.finish()
    }

    pub const VT_NOTE: flatbuffers::VOffsetT = 4;
    pub const VT_INSTRUMENT: flatbuffers::VOffsetT = 6;
    pub const VT_VOLUMEFFECT: flatbuffers::VOffsetT = 8;
    pub const VT_EFFECT: flatbuffers::VOffsetT = 10;
    pub const VT_VOLUME: flatbuffers::VOffsetT = 12;
    pub const VT_PARAMETER: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn note(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_NOTE, None)
  }
  #[inline]
  pub fn instrument(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_INSTRUMENT, None)
  }
  #[inline]
  pub fn volumeffect(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_VOLUMEFFECT, None)
  }
  #[inline]
  pub fn effect(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_EFFECT, None)
  }
  #[inline]
  pub fn volume(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_VOLUME, None)
  }
  #[inline]
  pub fn parameter(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoRowData::VT_PARAMETER, None)
  }
}

pub struct HippoRowDataArgs<'a> {
    pub note: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub instrument: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub volumeffect: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub effect: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub volume: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub parameter: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoRowDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoRowDataArgs {
            note: None,
            instrument: None,
            volumeffect: None,
            effect: None,
            volume: None,
            parameter: None,
        }
    }
}
pub struct HippoRowDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRowDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_note(&mut self, note: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_NOTE, note);
  }
  #[inline]
  pub fn add_instrument(&mut self, instrument: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_INSTRUMENT, instrument);
  }
  #[inline]
  pub fn add_volumeffect(&mut self, volumeffect: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_VOLUMEFFECT, volumeffect);
  }
  #[inline]
  pub fn add_effect(&mut self, effect: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_EFFECT, effect);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_VOLUME, volume);
  }
  #[inline]
  pub fn add_parameter(&mut self, parameter: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoRowData::VT_PARAMETER, parameter);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRowDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRowDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRowData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoSongMetadataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoSongMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoSongMetadata<'a> {
    type Inner = HippoSongMetadata<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoSongMetadata<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoSongMetadata {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoSongMetadataArgs<'args>) -> flatbuffers::WIPOffset<HippoSongMetadata<'bldr>> {
      let mut builder = HippoSongMetadataBuilder::new(_fbb);
      if let Some(x) = args.instruments { builder.add_instruments(x); }
      if let Some(x) = args.samples { builder.add_samples(x); }
      if let Some(x) = args.message { builder.add_message(x); }
      if let Some(x) = args.date { builder.add_date(x); }
      if let Some(x) = args.artist { builder.add_artist(x); }
      if let Some(x) = args.authoring_tool { builder.add_authoring_tool(x); }
      builder.add_length(args.length);
      if let Some(x) = args.song_type { builder.add_song_type(x); }
      if let Some(x) = args.title { builder.add_title(x); }
      if let Some(x) = args.url { builder.add_url(x); }
      builder.finish()
    }

    pub const VT_URL: flatbuffers::VOffsetT = 4;
    pub const VT_TITLE: flatbuffers::VOffsetT = 6;
    pub const VT_SONG_TYPE: flatbuffers::VOffsetT = 8;
    pub const VT_LENGTH: flatbuffers::VOffsetT = 10;
    pub const VT_AUTHORING_TOOL: flatbuffers::VOffsetT = 12;
    pub const VT_ARTIST: flatbuffers::VOffsetT = 14;
    pub const VT_DATE: flatbuffers::VOffsetT = 16;
    pub const VT_MESSAGE: flatbuffers::VOffsetT = 18;
    pub const VT_SAMPLES: flatbuffers::VOffsetT = 20;
    pub const VT_INSTRUMENTS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub fn url(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_URL, None)
  }
  #[inline]
  pub fn title(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_TITLE, None)
  }
  #[inline]
  pub fn song_type(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_SONG_TYPE, None)
  }
  #[inline]
  pub fn length(&self) -> f32 {
    self._tab.get::<f32>(HippoSongMetadata::VT_LENGTH, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn authoring_tool(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_AUTHORING_TOOL, None)
  }
  #[inline]
  pub fn artist(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_ARTIST, None)
  }
  #[inline]
  pub fn date(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_DATE, None)
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSongMetadata::VT_MESSAGE, None)
  }
  #[inline]
  pub fn samples(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<&'a str>>>>(HippoSongMetadata::VT_SAMPLES, None)
  }
  #[inline]
  pub fn instruments(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<&'a str>>>>(HippoSongMetadata::VT_INSTRUMENTS, None)
  }
}

pub struct HippoSongMetadataArgs<'a> {
    pub url: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub title: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub song_type: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub length: f32,
    pub authoring_tool: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub artist: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub date: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub message: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub samples: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<&'a  str>>>>,
    pub instruments: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<&'a  str>>>>,
}
impl<'a> Default for HippoSongMetadataArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoSongMetadataArgs {
            url: None,
            title: None,
            song_type: None,
            length: 0.0,
            authoring_tool: None,
            artist: None,
            date: None,
            message: None,
            samples: None,
            instruments: None,
        }
    }
}
pub struct HippoSongMetadataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoSongMetadataBuilder<'a, 'b> {
  #[inline]
  pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_URL, url);
  }
  #[inline]
  pub fn add_title(&mut self, title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_TITLE, title);
  }
  #[inline]
  pub fn add_song_type(&mut self, song_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_SONG_TYPE, song_type);
  }
  #[inline]
  pub fn add_length(&mut self, length: f32) {
    self.fbb_.push_slot::<f32>(HippoSongMetadata::VT_LENGTH, length, 0.0);
  }
  #[inline]
  pub fn add_authoring_tool(&mut self, authoring_tool: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_AUTHORING_TOOL, authoring_tool);
  }
  #[inline]
  pub fn add_artist(&mut self, artist: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_ARTIST, artist);
  }
  #[inline]
  pub fn add_date(&mut self, date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_DATE, date);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_samples(&mut self, samples: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_SAMPLES, samples);
  }
  #[inline]
  pub fn add_instruments(&mut self, instruments: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSongMetadata::VT_INSTRUMENTS, instruments);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoSongMetadataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoSongMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoSongMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoTrackerChannelOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoTrackerChannel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoTrackerChannel<'a> {
    type Inner = HippoTrackerChannel<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoTrackerChannel<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoTrackerChannel {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoTrackerChannelArgs<'args>) -> flatbuffers::WIPOffset<HippoTrackerChannel<'bldr>> {
      let mut builder = HippoTrackerChannelBuilder::new(_fbb);
      if let Some(x) = args.row_data { builder.add_row_data(x); }
      builder.finish()
    }

    pub const VT_ROW_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn row_data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HippoRowData<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<HippoRowData<'a>>>>>(HippoTrackerChannel::VT_ROW_DATA, None)
  }
}

pub struct HippoTrackerChannelArgs<'a> {
    pub row_data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<HippoRowData<'a >>>>>,
}
impl<'a> Default for HippoTrackerChannelArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoTrackerChannelArgs {
            row_data: None,
        }
    }
}
pub struct HippoTrackerChannelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoTrackerChannelBuilder<'a, 'b> {
  #[inline]
  pub fn add_row_data(&mut self, row_data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HippoRowData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoTrackerChannel::VT_ROW_DATA, row_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoTrackerChannelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoTrackerChannelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoTrackerChannel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoTrackerDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoTrackerData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoTrackerData<'a> {
    type Inner = HippoTrackerData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoTrackerData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoTrackerData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoTrackerDataArgs<'args>) -> flatbuffers::WIPOffset<HippoTrackerData<'bldr>> {
      let mut builder = HippoTrackerDataBuilder::new(_fbb);
      if let Some(x) = args.channels { builder.add_channels(x); }
      builder.add_current_row(args.current_row);
      builder.add_pattern(args.pattern);
      builder.add_type_(args.type_);
      builder.finish()
    }

    pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
    pub const VT_PATTERN: flatbuffers::VOffsetT = 6;
    pub const VT_CURRENT_ROW: flatbuffers::VOffsetT = 8;
    pub const VT_CHANNELS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn type_(&self) -> HippoTrackerType {
    self._tab.get::<HippoTrackerType>(HippoTrackerData::VT_TYPE_, Some(HippoTrackerType::Regular)).unwrap()
  }
  #[inline]
  pub fn pattern(&self) -> i32 {
    self._tab.get::<i32>(HippoTrackerData::VT_PATTERN, Some(0)).unwrap()
  }
  #[inline]
  pub fn current_row(&self) -> i32 {
    self._tab.get::<i32>(HippoTrackerData::VT_CURRENT_ROW, Some(0)).unwrap()
  }
  #[inline]
  pub fn channels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HippoTrackerChannel<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<HippoTrackerChannel<'a>>>>>(HippoTrackerData::VT_CHANNELS, None)
  }
}

pub struct HippoTrackerDataArgs<'a> {
    pub type_: HippoTrackerType,
    pub pattern: i32,
    pub current_row: i32,
    pub channels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<HippoTrackerChannel<'a >>>>>,
}
impl<'a> Default for HippoTrackerDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoTrackerDataArgs {
            type_: HippoTrackerType::Regular,
            pattern: 0,
            current_row: 0,
            channels: None,
        }
    }
}
pub struct HippoTrackerDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoTrackerDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_type_(&mut self, type_: HippoTrackerType) {
    self.fbb_.push_slot::<HippoTrackerType>(HippoTrackerData::VT_TYPE_, type_, HippoTrackerType::Regular);
  }
  #[inline]
  pub fn add_pattern(&mut self, pattern: i32) {
    self.fbb_.push_slot::<i32>(HippoTrackerData::VT_PATTERN, pattern, 0);
  }
  #[inline]
  pub fn add_current_row(&mut self, current_row: i32) {
    self.fbb_.push_slot::<i32>(HippoTrackerData::VT_CURRENT_ROW, current_row, 0);
  }
  #[inline]
  pub fn add_channels(&mut self, channels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HippoTrackerChannel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoTrackerData::VT_CHANNELS, channels);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoTrackerDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoTrackerDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoTrackerData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoCurrentPositionOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoCurrentPosition<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoCurrentPosition<'a> {
    type Inner = HippoCurrentPosition<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoCurrentPosition<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoCurrentPosition {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoCurrentPositionArgs) -> flatbuffers::WIPOffset<HippoCurrentPosition<'bldr>> {
      let mut builder = HippoCurrentPositionBuilder::new(_fbb);
      builder.add_duration(args.duration);
      builder.add_current_speed(args.current_speed);
      builder.add_current_row(args.current_row);
      builder.add_current_pattern(args.current_pattern);
      builder.add_position(args.position);
      builder.finish()
    }

    pub const VT_POSITION: flatbuffers::VOffsetT = 4;
    pub const VT_CURRENT_PATTERN: flatbuffers::VOffsetT = 6;
    pub const VT_CURRENT_ROW: flatbuffers::VOffsetT = 8;
    pub const VT_CURRENT_SPEED: flatbuffers::VOffsetT = 10;
    pub const VT_DURATION: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn position(&self) -> f32 {
    self._tab.get::<f32>(HippoCurrentPosition::VT_POSITION, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn current_pattern(&self) -> i32 {
    self._tab.get::<i32>(HippoCurrentPosition::VT_CURRENT_PATTERN, Some(0)).unwrap()
  }
  #[inline]
  pub fn current_row(&self) -> i32 {
    self._tab.get::<i32>(HippoCurrentPosition::VT_CURRENT_ROW, Some(0)).unwrap()
  }
  #[inline]
  pub fn current_speed(&self) -> i32 {
    self._tab.get::<i32>(HippoCurrentPosition::VT_CURRENT_SPEED, Some(0)).unwrap()
  }
  #[inline]
  pub fn duration(&self) -> f32 {
    self._tab.get::<f32>(HippoCurrentPosition::VT_DURATION, Some(0.0)).unwrap()
  }
}

pub struct HippoCurrentPositionArgs {
    pub position: f32,
    pub current_pattern: i32,
    pub current_row: i32,
    pub current_speed: i32,
    pub duration: f32,
}
impl<'a> Default for HippoCurrentPositionArgs {
    #[inline]
    fn default() -> Self {
        HippoCurrentPositionArgs {
            position: 0.0,
            current_pattern: 0,
            current_row: 0,
            current_speed: 0,
            duration: 0.0,
        }
    }
}
pub struct HippoCurrentPositionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoCurrentPositionBuilder<'a, 'b> {
  #[inline]
  pub fn add_position(&mut self, position: f32) {
    self.fbb_.push_slot::<f32>(HippoCurrentPosition::VT_POSITION, position, 0.0);
  }
  #[inline]
  pub fn add_current_pattern(&mut self, current_pattern: i32) {
    self.fbb_.push_slot::<i32>(HippoCurrentPosition::VT_CURRENT_PATTERN, current_pattern, 0);
  }
  #[inline]
  pub fn add_current_row(&mut self, current_row: i32) {
    self.fbb_.push_slot::<i32>(HippoCurrentPosition::VT_CURRENT_ROW, current_row, 0);
  }
  #[inline]
  pub fn add_current_speed(&mut self, current_speed: i32) {
    self.fbb_.push_slot::<i32>(HippoCurrentPosition::VT_CURRENT_SPEED, current_speed, 0);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: f32) {
    self.fbb_.push_slot::<f32>(HippoCurrentPosition::VT_DURATION, duration, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoCurrentPositionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoCurrentPositionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoCurrentPosition<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoOutputDeviceOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

///////////////////////////////////////////////////////////////////////////////////////////
pub struct HippoOutputDevice<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoOutputDevice<'a> {
    type Inner = HippoOutputDevice<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoOutputDevice<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoOutputDevice {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoOutputDeviceArgs<'args>) -> flatbuffers::WIPOffset<HippoOutputDevice<'bldr>> {
      let mut builder = HippoOutputDeviceBuilder::new(_fbb);
      builder.add_max_sample_rate(args.max_sample_rate);
      builder.add_min_sample_rate(args.min_sample_rate);
      builder.add_max_channels(args.max_channels);
      builder.add_min_channels(args.min_channels);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_MIN_CHANNELS: flatbuffers::VOffsetT = 6;
    pub const VT_MAX_CHANNELS: flatbuffers::VOffsetT = 8;
    pub const VT_MIN_SAMPLE_RATE: flatbuffers::VOffsetT = 10;
    pub const VT_MAX_SAMPLE_RATE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoOutputDevice::VT_NAME, None)
  }
  #[inline]
  pub fn min_channels(&self) -> i32 {
    self._tab.get::<i32>(HippoOutputDevice::VT_MIN_CHANNELS, Some(0)).unwrap()
  }
  #[inline]
  pub fn max_channels(&self) -> i32 {
    self._tab.get::<i32>(HippoOutputDevice::VT_MAX_CHANNELS, Some(0)).unwrap()
  }
  #[inline]
  pub fn min_sample_rate(&self) -> i32 {
    self._tab.get::<i32>(HippoOutputDevice::VT_MIN_SAMPLE_RATE, Some(0)).unwrap()
  }
  #[inline]
  pub fn max_sample_rate(&self) -> i32 {
    self._tab.get::<i32>(HippoOutputDevice::VT_MAX_SAMPLE_RATE, Some(0)).unwrap()
  }
}

pub struct HippoOutputDeviceArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub min_channels: i32,
    pub max_channels: i32,
    pub min_sample_rate: i32,
    pub max_sample_rate: i32,
}
impl<'a> Default for HippoOutputDeviceArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoOutputDeviceArgs {
            name: None,
            min_channels: 0,
            max_channels: 0,
            min_sample_rate: 0,
            max_sample_rate: 0,
        }
    }
}
pub struct HippoOutputDeviceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoOutputDeviceBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoOutputDevice::VT_NAME, name);
  }
  #[inline]
  pub fn add_min_channels(&mut self, min_channels: i32) {
    self.fbb_.push_slot::<i32>(HippoOutputDevice::VT_MIN_CHANNELS, min_channels, 0);
  }
  #[inline]
  pub fn add_max_channels(&mut self, max_channels: i32) {
    self.fbb_.push_slot::<i32>(HippoOutputDevice::VT_MAX_CHANNELS, max_channels, 0);
  }
  #[inline]
  pub fn add_min_sample_rate(&mut self, min_sample_rate: i32) {
    self.fbb_.push_slot::<i32>(HippoOutputDevice::VT_MIN_SAMPLE_RATE, min_sample_rate, 0);
  }
  #[inline]
  pub fn add_max_sample_rate(&mut self, max_sample_rate: i32) {
    self.fbb_.push_slot::<i32>(HippoOutputDevice::VT_MAX_SAMPLE_RATE, max_sample_rate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoOutputDeviceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoOutputDeviceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoOutputDevice<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoRequestOutputDevicesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoRequestOutputDevices<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoRequestOutputDevices<'a> {
    type Inner = HippoRequestOutputDevices<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoRequestOutputDevices<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoRequestOutputDevices {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoRequestOutputDevicesArgs) -> flatbuffers::WIPOffset<HippoRequestOutputDevices<'bldr>> {
      let mut builder = HippoRequestOutputDevicesBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoRequestOutputDevicesArgs {
}
impl<'a> Default for HippoRequestOutputDevicesArgs {
    #[inline]
    fn default() -> Self {
        HippoRequestOutputDevicesArgs {
        }
    }
}
pub struct HippoRequestOutputDevicesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoRequestOutputDevicesBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoRequestOutputDevicesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoRequestOutputDevicesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoRequestOutputDevices<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoReplyOutputDevicesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoReplyOutputDevices<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoReplyOutputDevices<'a> {
    type Inner = HippoReplyOutputDevices<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoReplyOutputDevices<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoReplyOutputDevices {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoReplyOutputDevicesArgs<'args>) -> flatbuffers::WIPOffset<HippoReplyOutputDevices<'bldr>> {
      let mut builder = HippoReplyOutputDevicesBuilder::new(_fbb);
      if let Some(x) = args.devices { builder.add_devices(x); }
      if let Some(x) = args.current_device { builder.add_current_device(x); }
      builder.finish()
    }

    pub const VT_CURRENT_DEVICE: flatbuffers::VOffsetT = 4;
    pub const VT_DEVICES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn current_device(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoReplyOutputDevices::VT_CURRENT_DEVICE, None)
  }
  #[inline]
  pub fn devices(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HippoOutputDevice<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<HippoOutputDevice<'a>>>>>(HippoReplyOutputDevices::VT_DEVICES, None)
  }
}

pub struct HippoReplyOutputDevicesArgs<'a> {
    pub current_device: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub devices: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<HippoOutputDevice<'a >>>>>,
}
impl<'a> Default for HippoReplyOutputDevicesArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoReplyOutputDevicesArgs {
            current_device: None,
            devices: None,
        }
    }
}
pub struct HippoReplyOutputDevicesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoReplyOutputDevicesBuilder<'a, 'b> {
  #[inline]
  pub fn add_current_device(&mut self, current_device: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoReplyOutputDevices::VT_CURRENT_DEVICE, current_device);
  }
  #[inline]
  pub fn add_devices(&mut self, devices: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HippoOutputDevice<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoReplyOutputDevices::VT_DEVICES, devices);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoReplyOutputDevicesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoReplyOutputDevicesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoReplyOutputDevices<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoSelectOutputDeviceOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoSelectOutputDevice<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoSelectOutputDevice<'a> {
    type Inner = HippoSelectOutputDevice<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoSelectOutputDevice<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoSelectOutputDevice {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoSelectOutputDeviceArgs<'args>) -> flatbuffers::WIPOffset<HippoSelectOutputDevice<'bldr>> {
      let mut builder = HippoSelectOutputDeviceBuilder::new(_fbb);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSelectOutputDevice::VT_NAME, None)
  }
}

pub struct HippoSelectOutputDeviceArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoSelectOutputDeviceArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoSelectOutputDeviceArgs {
            name: None,
        }
    }
}
pub struct HippoSelectOutputDeviceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoSelectOutputDeviceBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSelectOutputDevice::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoSelectOutputDeviceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoSelectOutputDeviceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoSelectOutputDevice<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoMessage<'a> {
    type Inner = HippoMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoMessageArgs<'args>) -> flatbuffers::WIPOffset<HippoMessage<'bldr>> {
      let mut builder = HippoMessageBuilder::new(_fbb);
      if let Some(x) = args.user_data { builder.add_user_data(x); }
      if let Some(x) = args.message { builder.add_message(x); }
      builder.add_message_type(args.message_type);
      builder.finish()
    }

    pub const VT_MESSAGE_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;
    pub const VT_USER_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn message_type(&self) -> MessageType {
    self._tab.get::<MessageType>(HippoMessage::VT_MESSAGE_TYPE, Some(MessageType::NONE)).unwrap()
  }
  #[inline]
  pub fn message(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(HippoMessage::VT_MESSAGE, None)
  }
  #[inline]
  pub fn user_data(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoMessage::VT_USER_DATA, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_next_song(&self) -> Option<HippoNextSong<'a>> {
    if self.message_type() == MessageType::next_song {
      self.message().map(|u| HippoNextSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_prev_song(&self) -> Option<HippoPrevSong<'a>> {
    if self.message_type() == MessageType::prev_song {
      self.message().map(|u| HippoPrevSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_play_song(&self) -> Option<HippoPlaySong<'a>> {
    if self.message_type() == MessageType::play_song {
      self.message().map(|u| HippoPlaySong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_stop_song(&self) -> Option<HippoStopSong<'a>> {
    if self.message_type() == MessageType::stop_song {
      self.message().map(|u| HippoStopSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_loop_current(&self) -> Option<HippoLoopCurrent<'a>> {
    if self.message_type() == MessageType::loop_current {
      self.message().map(|u| HippoLoopCurrent::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_randomize_playlist(&self) -> Option<HippoRandomizePlaylist<'a>> {
    if self.message_type() == MessageType::randomize_playlist {
      self.message().map(|u| HippoRandomizePlaylist::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request_added_urls(&self) -> Option<HippoRequestAddedUrls<'a>> {
    if self.message_type() == MessageType::request_added_urls {
      self.message().map(|u| HippoRequestAddedUrls::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request_select_song(&self) -> Option<HippoRequestSelectSong<'a>> {
    if self.message_type() == MessageType::request_select_song {
      self.message().map(|u| HippoRequestSelectSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_select_song(&self) -> Option<HippoSelectSong<'a>> {
    if self.message_type() == MessageType::select_song {
      self.message().map(|u| HippoSelectSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request_add_urls(&self) -> Option<HippoRequestAddUrls<'a>> {
    if self.message_type() == MessageType::request_add_urls {
      self.message().map(|u| HippoRequestAddUrls::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_reply_added_urls(&self) -> Option<HippoReplyAddedUrls<'a>> {
    if self.message_type() == MessageType::reply_added_urls {
      self.message().map(|u| HippoReplyAddedUrls::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request_tracker_data(&self) -> Option<HippoRequestSelectSong<'a>> {
    if self.message_type() == MessageType::request_tracker_data {
      self.message().map(|u| HippoRequestSelectSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_tracker_data(&self) -> Option<HippoTrackerData<'a>> {
    if self.message_type() == MessageType::tracker_data {
      self.message().map(|u| HippoTrackerData::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_current_position(&self) -> Option<HippoCurrentPosition<'a>> {
    if self.message_type() == MessageType::current_position {
      self.message().map(|u| HippoCurrentPosition::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_song_metadata(&self) -> Option<HippoSongMetadata<'a>> {
    if self.message_type() == MessageType::song_metadata {
      self.message().map(|u| HippoSongMetadata::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_log_messages(&self) -> Option<HippoLogMessages<'a>> {
    if self.message_type() == MessageType::log_messages {
      self.message().map(|u| HippoLogMessages::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_log_clear(&self) -> Option<HippoLogClear<'a>> {
    if self.message_type() == MessageType::log_clear {
      self.message().map(|u| HippoLogClear::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_log_file(&self) -> Option<HippoLogToFile<'a>> {
    if self.message_type() == MessageType::log_file {
      self.message().map(|u| HippoLogToFile::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_log_send_messages(&self) -> Option<HippoLogSendMessages<'a>> {
    if self.message_type() == MessageType::log_send_messages {
      self.message().map(|u| HippoLogSendMessages::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_request_output_devices(&self) -> Option<HippoRequestOutputDevices<'a>> {
    if self.message_type() == MessageType::request_output_devices {
      self.message().map(|u| HippoRequestOutputDevices::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_reply_output_devices(&self) -> Option<HippoReplyOutputDevices<'a>> {
    if self.message_type() == MessageType::reply_output_devices {
      self.message().map(|u| HippoReplyOutputDevices::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_select_output_device(&self) -> Option<HippoSelectOutputDevice<'a>> {
    if self.message_type() == MessageType::select_output_device {
      self.message().map(|u| HippoSelectOutputDevice::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct HippoMessageArgs<'a> {
    pub message_type: MessageType,
    pub message: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub user_data: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoMessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoMessageArgs {
            message_type: MessageType::NONE,
            message: None,
            user_data: None,
        }
    }
}
pub struct HippoMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_message_type(&mut self, message_type: MessageType) {
    self.fbb_.push_slot::<MessageType>(HippoMessage::VT_MESSAGE_TYPE, message_type, MessageType::NONE);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoMessage::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_user_data(&mut self, user_data: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoMessage::VT_USER_DATA, user_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_hippo_message<'a>(buf: &'a [u8]) -> HippoMessage<'a> {
  flatbuffers::get_root::<HippoMessage<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_hippo_message<'a>(buf: &'a [u8]) -> HippoMessage<'a> {
  flatbuffers::get_size_prefixed_root::<HippoMessage<'a>>(buf)
}

#[inline]
pub fn finish_hippo_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<HippoMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_hippo_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<HippoMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
