// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum MessageType {
  NONE = 0,
  next_song = 1,
  select_song = 2,

}

const ENUM_MIN_MESSAGE_TYPE: u8 = 0;
const ENUM_MAX_MESSAGE_TYPE: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for MessageType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for MessageType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const MessageType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const MessageType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for MessageType {
    type Output = MessageType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<MessageType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_MESSAGE_TYPE:[MessageType; 3] = [
  MessageType::NONE,
  MessageType::next_song,
  MessageType::select_song
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_MESSAGE_TYPE:[&'static str; 3] = [
    "NONE",
    "next_song",
    "select_song"
];

pub fn enum_name_message_type(e: MessageType) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_MESSAGE_TYPE[index as usize]
}

pub struct MessageTypeUnionTableOffset {}
pub enum HippoNextSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoNextSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoNextSong<'a> {
    type Inner = HippoNextSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoNextSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoNextSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args HippoNextSongArgs) -> flatbuffers::WIPOffset<HippoNextSong<'bldr>> {
      let mut builder = HippoNextSongBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct HippoNextSongArgs {
}
impl<'a> Default for HippoNextSongArgs {
    #[inline]
    fn default() -> Self {
        HippoNextSongArgs {
        }
    }
}
pub struct HippoNextSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoNextSongBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoNextSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoNextSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoNextSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoSelectSongOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoSelectSong<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoSelectSong<'a> {
    type Inner = HippoSelectSong<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoSelectSong<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoSelectSong {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoSelectSongArgs<'args>) -> flatbuffers::WIPOffset<HippoSelectSong<'bldr>> {
      let mut builder = HippoSelectSongBuilder::new(_fbb);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoSelectSong::VT_NAME, None)
  }
}

pub struct HippoSelectSongArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoSelectSongArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoSelectSongArgs {
            name: None,
        }
    }
}
pub struct HippoSelectSongBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoSelectSongBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoSelectSong::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoSelectSongBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoSelectSongBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoSelectSong<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HippoMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct HippoMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HippoMessage<'a> {
    type Inner = HippoMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> HippoMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        HippoMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HippoMessageArgs<'args>) -> flatbuffers::WIPOffset<HippoMessage<'bldr>> {
      let mut builder = HippoMessageBuilder::new(_fbb);
      if let Some(x) = args.user_data { builder.add_user_data(x); }
      if let Some(x) = args.message { builder.add_message(x); }
      builder.add_message_type(args.message_type);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_MESSAGE_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_MESSAGE: flatbuffers::VOffsetT = 8;
    pub const VT_USER_DATA: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn id(&self) -> i8 {
    self._tab.get::<i8>(HippoMessage::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn message_type(&self) -> MessageType {
    self._tab.get::<MessageType>(HippoMessage::VT_MESSAGE_TYPE, Some(MessageType::NONE)).unwrap()
  }
  #[inline]
  pub fn message(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(HippoMessage::VT_MESSAGE, None)
  }
  #[inline]
  pub fn user_data(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HippoMessage::VT_USER_DATA, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_next_song(&self) -> Option<HippoNextSong<'a>> {
    if self.message_type() == MessageType::next_song {
      self.message().map(|u| HippoNextSong::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_select_song(&self) -> Option<HippoNextSong<'a>> {
    if self.message_type() == MessageType::select_song {
      self.message().map(|u| HippoNextSong::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct HippoMessageArgs<'a> {
    pub id: i8,
    pub message_type: MessageType,
    pub message: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub user_data: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for HippoMessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        HippoMessageArgs {
            id: 0,
            message_type: MessageType::NONE,
            message: None,
            user_data: None,
        }
    }
}
pub struct HippoMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HippoMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: i8) {
    self.fbb_.push_slot::<i8>(HippoMessage::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_message_type(&mut self, message_type: MessageType) {
    self.fbb_.push_slot::<MessageType>(HippoMessage::VT_MESSAGE_TYPE, message_type, MessageType::NONE);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoMessage::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_user_data(&mut self, user_data: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HippoMessage::VT_USER_DATA, user_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HippoMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HippoMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HippoMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_hippo_message<'a>(buf: &'a [u8]) -> HippoMessage<'a> {
  flatbuffers::get_root::<HippoMessage<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_hippo_message<'a>(buf: &'a [u8]) -> HippoMessage<'a> {
  flatbuffers::get_size_prefixed_root::<HippoMessage<'a>>(buf)
}

#[inline]
pub fn finish_hippo_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<HippoMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_hippo_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<HippoMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
