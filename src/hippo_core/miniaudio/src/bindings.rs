/* automatically generated by rust-bindgen */

pub const MA_COINIT_VALUE: u32 = 2;
pub const MA_VERSION_MAJOR: u32 = 0;
pub const MA_VERSION_MINOR: u32 = 10;
pub const MA_VERSION_REVISION: u32 = 28;
pub const MA_TRUE: u32 = 1;
pub const MA_FALSE: u32 = 0;
pub const MA_SIZE_MAX: u32 = 4294967295;
pub const MA_SIMD_ALIGNMENT: u32 = 64;
pub const MA_LOG_LEVEL_VERBOSE: u32 = 4;
pub const MA_LOG_LEVEL_INFO: u32 = 3;
pub const MA_LOG_LEVEL_WARNING: u32 = 2;
pub const MA_LOG_LEVEL_ERROR: u32 = 1;
pub const MA_LOG_LEVEL: u32 = 1;
pub const MA_CHANNEL_NONE: u32 = 0;
pub const MA_CHANNEL_MONO: u32 = 1;
pub const MA_CHANNEL_FRONT_LEFT: u32 = 2;
pub const MA_CHANNEL_FRONT_RIGHT: u32 = 3;
pub const MA_CHANNEL_FRONT_CENTER: u32 = 4;
pub const MA_CHANNEL_LFE: u32 = 5;
pub const MA_CHANNEL_BACK_LEFT: u32 = 6;
pub const MA_CHANNEL_BACK_RIGHT: u32 = 7;
pub const MA_CHANNEL_FRONT_LEFT_CENTER: u32 = 8;
pub const MA_CHANNEL_FRONT_RIGHT_CENTER: u32 = 9;
pub const MA_CHANNEL_BACK_CENTER: u32 = 10;
pub const MA_CHANNEL_SIDE_LEFT: u32 = 11;
pub const MA_CHANNEL_SIDE_RIGHT: u32 = 12;
pub const MA_CHANNEL_TOP_CENTER: u32 = 13;
pub const MA_CHANNEL_TOP_FRONT_LEFT: u32 = 14;
pub const MA_CHANNEL_TOP_FRONT_CENTER: u32 = 15;
pub const MA_CHANNEL_TOP_FRONT_RIGHT: u32 = 16;
pub const MA_CHANNEL_TOP_BACK_LEFT: u32 = 17;
pub const MA_CHANNEL_TOP_BACK_CENTER: u32 = 18;
pub const MA_CHANNEL_TOP_BACK_RIGHT: u32 = 19;
pub const MA_CHANNEL_AUX_0: u32 = 20;
pub const MA_CHANNEL_AUX_1: u32 = 21;
pub const MA_CHANNEL_AUX_2: u32 = 22;
pub const MA_CHANNEL_AUX_3: u32 = 23;
pub const MA_CHANNEL_AUX_4: u32 = 24;
pub const MA_CHANNEL_AUX_5: u32 = 25;
pub const MA_CHANNEL_AUX_6: u32 = 26;
pub const MA_CHANNEL_AUX_7: u32 = 27;
pub const MA_CHANNEL_AUX_8: u32 = 28;
pub const MA_CHANNEL_AUX_9: u32 = 29;
pub const MA_CHANNEL_AUX_10: u32 = 30;
pub const MA_CHANNEL_AUX_11: u32 = 31;
pub const MA_CHANNEL_AUX_12: u32 = 32;
pub const MA_CHANNEL_AUX_13: u32 = 33;
pub const MA_CHANNEL_AUX_14: u32 = 34;
pub const MA_CHANNEL_AUX_15: u32 = 35;
pub const MA_CHANNEL_AUX_16: u32 = 36;
pub const MA_CHANNEL_AUX_17: u32 = 37;
pub const MA_CHANNEL_AUX_18: u32 = 38;
pub const MA_CHANNEL_AUX_19: u32 = 39;
pub const MA_CHANNEL_AUX_20: u32 = 40;
pub const MA_CHANNEL_AUX_21: u32 = 41;
pub const MA_CHANNEL_AUX_22: u32 = 42;
pub const MA_CHANNEL_AUX_23: u32 = 43;
pub const MA_CHANNEL_AUX_24: u32 = 44;
pub const MA_CHANNEL_AUX_25: u32 = 45;
pub const MA_CHANNEL_AUX_26: u32 = 46;
pub const MA_CHANNEL_AUX_27: u32 = 47;
pub const MA_CHANNEL_AUX_28: u32 = 48;
pub const MA_CHANNEL_AUX_29: u32 = 49;
pub const MA_CHANNEL_AUX_30: u32 = 50;
pub const MA_CHANNEL_AUX_31: u32 = 51;
pub const MA_CHANNEL_LEFT: u32 = 2;
pub const MA_CHANNEL_RIGHT: u32 = 3;
pub const MA_CHANNEL_POSITION_COUNT: u32 = 52;
pub const MA_SUCCESS: u32 = 0;
pub const MA_ERROR: i32 = -1;
pub const MA_INVALID_ARGS: i32 = -2;
pub const MA_INVALID_OPERATION: i32 = -3;
pub const MA_OUT_OF_MEMORY: i32 = -4;
pub const MA_OUT_OF_RANGE: i32 = -5;
pub const MA_ACCESS_DENIED: i32 = -6;
pub const MA_DOES_NOT_EXIST: i32 = -7;
pub const MA_ALREADY_EXISTS: i32 = -8;
pub const MA_TOO_MANY_OPEN_FILES: i32 = -9;
pub const MA_INVALID_FILE: i32 = -10;
pub const MA_TOO_BIG: i32 = -11;
pub const MA_PATH_TOO_LONG: i32 = -12;
pub const MA_NAME_TOO_LONG: i32 = -13;
pub const MA_NOT_DIRECTORY: i32 = -14;
pub const MA_IS_DIRECTORY: i32 = -15;
pub const MA_DIRECTORY_NOT_EMPTY: i32 = -16;
pub const MA_END_OF_FILE: i32 = -17;
pub const MA_NO_SPACE: i32 = -18;
pub const MA_BUSY: i32 = -19;
pub const MA_IO_ERROR: i32 = -20;
pub const MA_INTERRUPT: i32 = -21;
pub const MA_UNAVAILABLE: i32 = -22;
pub const MA_ALREADY_IN_USE: i32 = -23;
pub const MA_BAD_ADDRESS: i32 = -24;
pub const MA_BAD_SEEK: i32 = -25;
pub const MA_BAD_PIPE: i32 = -26;
pub const MA_DEADLOCK: i32 = -27;
pub const MA_TOO_MANY_LINKS: i32 = -28;
pub const MA_NOT_IMPLEMENTED: i32 = -29;
pub const MA_NO_MESSAGE: i32 = -30;
pub const MA_BAD_MESSAGE: i32 = -31;
pub const MA_NO_DATA_AVAILABLE: i32 = -32;
pub const MA_INVALID_DATA: i32 = -33;
pub const MA_TIMEOUT: i32 = -34;
pub const MA_NO_NETWORK: i32 = -35;
pub const MA_NOT_UNIQUE: i32 = -36;
pub const MA_NOT_SOCKET: i32 = -37;
pub const MA_NO_ADDRESS: i32 = -38;
pub const MA_BAD_PROTOCOL: i32 = -39;
pub const MA_PROTOCOL_UNAVAILABLE: i32 = -40;
pub const MA_PROTOCOL_NOT_SUPPORTED: i32 = -41;
pub const MA_PROTOCOL_FAMILY_NOT_SUPPORTED: i32 = -42;
pub const MA_ADDRESS_FAMILY_NOT_SUPPORTED: i32 = -43;
pub const MA_SOCKET_NOT_SUPPORTED: i32 = -44;
pub const MA_CONNECTION_RESET: i32 = -45;
pub const MA_ALREADY_CONNECTED: i32 = -46;
pub const MA_NOT_CONNECTED: i32 = -47;
pub const MA_CONNECTION_REFUSED: i32 = -48;
pub const MA_NO_HOST: i32 = -49;
pub const MA_IN_PROGRESS: i32 = -50;
pub const MA_CANCELLED: i32 = -51;
pub const MA_MEMORY_ALREADY_MAPPED: i32 = -52;
pub const MA_AT_END: i32 = -53;
pub const MA_FORMAT_NOT_SUPPORTED: i32 = -100;
pub const MA_DEVICE_TYPE_NOT_SUPPORTED: i32 = -101;
pub const MA_SHARE_MODE_NOT_SUPPORTED: i32 = -102;
pub const MA_NO_BACKEND: i32 = -103;
pub const MA_NO_DEVICE: i32 = -104;
pub const MA_API_NOT_FOUND: i32 = -105;
pub const MA_INVALID_DEVICE_CONFIG: i32 = -106;
pub const MA_DEVICE_NOT_INITIALIZED: i32 = -200;
pub const MA_DEVICE_ALREADY_INITIALIZED: i32 = -201;
pub const MA_DEVICE_NOT_STARTED: i32 = -202;
pub const MA_DEVICE_NOT_STOPPED: i32 = -203;
pub const MA_FAILED_TO_INIT_BACKEND: i32 = -300;
pub const MA_FAILED_TO_OPEN_BACKEND_DEVICE: i32 = -301;
pub const MA_FAILED_TO_START_BACKEND_DEVICE: i32 = -302;
pub const MA_FAILED_TO_STOP_BACKEND_DEVICE: i32 = -303;
pub const MA_SAMPLE_RATE_8000: u32 = 8000;
pub const MA_SAMPLE_RATE_11025: u32 = 11025;
pub const MA_SAMPLE_RATE_16000: u32 = 16000;
pub const MA_SAMPLE_RATE_22050: u32 = 22050;
pub const MA_SAMPLE_RATE_24000: u32 = 24000;
pub const MA_SAMPLE_RATE_32000: u32 = 32000;
pub const MA_SAMPLE_RATE_44100: u32 = 44100;
pub const MA_SAMPLE_RATE_48000: u32 = 48000;
pub const MA_SAMPLE_RATE_88200: u32 = 88200;
pub const MA_SAMPLE_RATE_96000: u32 = 96000;
pub const MA_SAMPLE_RATE_176400: u32 = 176400;
pub const MA_SAMPLE_RATE_192000: u32 = 192000;
pub const MA_SAMPLE_RATE_352800: u32 = 352800;
pub const MA_SAMPLE_RATE_384000: u32 = 384000;
pub const MA_MIN_CHANNELS: u32 = 1;
pub const MA_MAX_CHANNELS: u32 = 32;
pub const MA_MIN_SAMPLE_RATE: u32 = 8000;
pub const MA_MAX_SAMPLE_RATE: u32 = 384000;
pub const MA_MAX_FILTER_ORDER: u32 = 8;
pub const MA_STATE_UNINITIALIZED: u32 = 0;
pub const MA_STATE_STOPPED: u32 = 1;
pub const MA_STATE_STARTED: u32 = 2;
pub const MA_STATE_STARTING: u32 = 3;
pub const MA_STATE_STOPPING: u32 = 4;
pub const MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE: u32 = 2;
pub const MA_OPEN_MODE_READ: u32 = 1;
pub const MA_OPEN_MODE_WRITE: u32 = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
    }
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals )
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
pub type wchar_t = ::std::os::raw::c_int;
pub type ma_int8 = ::std::os::raw::c_schar;
pub type ma_uint8 = ::std::os::raw::c_uchar;
pub type ma_int16 = ::std::os::raw::c_short;
pub type ma_uint16 = ::std::os::raw::c_ushort;
pub type ma_int32 = ::std::os::raw::c_int;
pub type ma_uint32 = ::std::os::raw::c_uint;
pub type ma_int64 = ::std::os::raw::c_longlong;
pub type ma_uint64 = ::std::os::raw::c_ulonglong;
pub type ma_uintptr = ma_uint64;
pub type ma_bool8 = ma_uint8;
pub type ma_bool32 = ma_uint32;
pub type ma_handle = *mut ::std::os::raw::c_void;
pub type ma_ptr = *mut ::std::os::raw::c_void;
pub type ma_proc = ::std::option::Option<unsafe extern "C" fn()>;
pub type ma_channel = ma_uint8;
pub type ma_result = ::std::os::raw::c_int;
pub const ma_stream_format_pcm: ma_stream_format = 0;
pub type ma_stream_format = u32;
pub const ma_stream_layout_interleaved: ma_stream_layout = 0;
pub const ma_stream_layout_deinterleaved: ma_stream_layout = 1;
pub type ma_stream_layout = u32;
pub const ma_dither_mode_none: ma_dither_mode = 0;
pub const ma_dither_mode_rectangle: ma_dither_mode = 1;
pub const ma_dither_mode_triangle: ma_dither_mode = 2;
pub type ma_dither_mode = u32;
pub const ma_format_unknown: ma_format = 0;
pub const ma_format_u8: ma_format = 1;
pub const ma_format_s16: ma_format = 2;
pub const ma_format_s24: ma_format = 3;
pub const ma_format_s32: ma_format = 4;
pub const ma_format_f32: ma_format = 5;
pub const ma_format_count: ma_format = 6;
pub type ma_format = u32;
pub const ma_channel_mix_mode_rectangular: ma_channel_mix_mode = 0;
pub const ma_channel_mix_mode_simple: ma_channel_mix_mode = 1;
pub const ma_channel_mix_mode_custom_weights: ma_channel_mix_mode = 2;
pub const ma_channel_mix_mode_planar_blend: ma_channel_mix_mode = 0;
pub const ma_channel_mix_mode_default: ma_channel_mix_mode = 0;
pub type ma_channel_mix_mode = u32;
pub const ma_standard_channel_map_microsoft: ma_standard_channel_map = 0;
pub const ma_standard_channel_map_alsa: ma_standard_channel_map = 1;
pub const ma_standard_channel_map_rfc3551: ma_standard_channel_map = 2;
pub const ma_standard_channel_map_flac: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_vorbis: ma_standard_channel_map = 4;
pub const ma_standard_channel_map_sound4: ma_standard_channel_map = 5;
pub const ma_standard_channel_map_sndio: ma_standard_channel_map = 6;
pub const ma_standard_channel_map_webaudio: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_default: ma_standard_channel_map = 0;
pub type ma_standard_channel_map = u32;
pub const ma_performance_profile_low_latency: ma_performance_profile = 0;
pub const ma_performance_profile_conservative: ma_performance_profile = 1;
pub type ma_performance_profile = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_allocation_callbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub onMalloc: ::std::option::Option<
        unsafe extern "C" fn(
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onFree: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            pUserData: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lcg {
    pub state: ma_int32,
}
pub const ma_thread_priority_idle: ma_thread_priority = -5;
pub const ma_thread_priority_lowest: ma_thread_priority = -4;
pub const ma_thread_priority_low: ma_thread_priority = -3;
pub const ma_thread_priority_normal: ma_thread_priority = -2;
pub const ma_thread_priority_high: ma_thread_priority = -1;
pub const ma_thread_priority_highest: ma_thread_priority = 0;
pub const ma_thread_priority_realtime: ma_thread_priority = 1;
pub const ma_thread_priority_default: ma_thread_priority = 0;
pub type ma_thread_priority = i32;
pub type ma_spinlock = ::std::os::raw::c_uchar;
pub type ma_thread = pthread_t;
pub type ma_mutex = pthread_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_event {
    pub value: ma_uint32,
    pub lock: pthread_mutex_t,
    pub cond: pthread_cond_t,
}
impl ::std::fmt::Debug for ma_event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_event {{ value: {:?}, lock: {:?}, cond: {:?} }}",
            self.value, self.lock, self.cond
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_semaphore {
    pub value: ::std::os::raw::c_int,
    pub lock: pthread_mutex_t,
    pub cond: pthread_cond_t,
}
impl ::std::fmt::Debug for ma_semaphore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_semaphore {{ value: {:?}, lock: {:?}, cond: {:?} }}",
            self.value, self.lock, self.cond
        )
    }
}
extern "C" {
    pub fn ma_version(pMajor: *mut ma_uint32, pMinor: *mut ma_uint32, pRevision: *mut ma_uint32);
}
extern "C" {
    pub fn ma_version_string() -> *const ::std::os::raw::c_char;
}
#[doc = "Biquad Filtering"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_biquad_coefficient {
    pub f32: f32,
    pub s32: ma_int32,
    _bindgen_union_align: u32,
}
impl ::std::fmt::Debug for ma_biquad_coefficient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_biquad_coefficient {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_biquad_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: f64,
    pub b1: f64,
    pub b2: f64,
    pub a0: f64,
    pub a1: f64,
    pub a2: f64,
}
extern "C" {
    pub fn ma_biquad_config_init(
        format: ma_format,
        channels: ma_uint32,
        b0: f64,
        b1: f64,
        b2: f64,
        a0: f64,
        a1: f64,
        a2: f64,
    ) -> ma_biquad_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_biquad {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: ma_biquad_coefficient,
    pub b1: ma_biquad_coefficient,
    pub b2: ma_biquad_coefficient,
    pub a1: ma_biquad_coefficient,
    pub a2: ma_biquad_coefficient,
    pub r1: [ma_biquad_coefficient; 32usize],
    pub r2: [ma_biquad_coefficient; 32usize],
}
impl ::std::fmt::Debug for ma_biquad {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_biquad {{ format: {:?}, channels: {:?}, b0: {:?}, b1: {:?}, b2: {:?}, a1: {:?}, a2: {:?}, r1: [{}], r2: [{}] }}" , self . format , self . channels , self . b0 , self . b1 , self . b2 , self . a1 , self . a2 , self . r1 . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . r2 . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
extern "C" {
    pub fn ma_biquad_init(pConfig: *const ma_biquad_config, pBQ: *mut ma_biquad) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_reinit(pConfig: *const ma_biquad_config, pBQ: *mut ma_biquad) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_process_pcm_frames(
        pBQ: *mut ma_biquad,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_get_latency(pBQ: *mut ma_biquad) -> ma_uint32;
}
#[doc = "Low-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
pub type ma_lpf2_config = ma_lpf1_config;
extern "C" {
    pub fn ma_lpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_lpf1_config;
}
extern "C" {
    pub fn ma_lpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_lpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub r1: [ma_biquad_coefficient; 32usize],
}
impl ::std::fmt::Debug for ma_lpf1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_lpf1 {{ format: {:?}, channels: {:?}, a: {:?}, r1: [{}] }}",
            self.format,
            self.channels,
            self.a,
            self.r1
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
extern "C" {
    pub fn ma_lpf1_init(pConfig: *const ma_lpf1_config, pLPF: *mut ma_lpf1) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_reinit(pConfig: *const ma_lpf1_config, pLPF: *mut ma_lpf1) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_process_pcm_frames(
        pLPF: *mut ma_lpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_get_latency(pLPF: *mut ma_lpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_lpf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_lpf2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_lpf2_init(pConfig: *const ma_lpf2_config, pLPF: *mut ma_lpf2) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_reinit(pConfig: *const ma_lpf2_config, pLPF: *mut ma_lpf2) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_process_pcm_frames(
        pLPF: *mut ma_lpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_get_latency(pLPF: *mut ma_lpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
extern "C" {
    pub fn ma_lpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_lpf_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub lpf1Count: ma_uint32,
    pub lpf2Count: ma_uint32,
    pub lpf1: [ma_lpf1; 1usize],
    pub lpf2: [ma_lpf2; 4usize],
}
impl ::std::fmt::Debug for ma_lpf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_lpf {{ format: {:?}, channels: {:?}, sampleRate: {:?}, lpf1Count: {:?}, lpf2Count: {:?}, lpf1: {:?}, lpf2: {:?} }}" , self . format , self . channels , self . sampleRate , self . lpf1Count , self . lpf2Count , self . lpf1 , self . lpf2 )
    }
}
extern "C" {
    pub fn ma_lpf_init(pConfig: *const ma_lpf_config, pLPF: *mut ma_lpf) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_reinit(pConfig: *const ma_lpf_config, pLPF: *mut ma_lpf) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_process_pcm_frames(
        pLPF: *mut ma_lpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_get_latency(pLPF: *mut ma_lpf) -> ma_uint32;
}
#[doc = "High-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
pub type ma_hpf2_config = ma_hpf1_config;
extern "C" {
    pub fn ma_hpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_hpf1_config;
}
extern "C" {
    pub fn ma_hpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_hpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub r1: [ma_biquad_coefficient; 32usize],
}
impl ::std::fmt::Debug for ma_hpf1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_hpf1 {{ format: {:?}, channels: {:?}, a: {:?}, r1: [{}] }}",
            self.format,
            self.channels,
            self.a,
            self.r1
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
extern "C" {
    pub fn ma_hpf1_init(pConfig: *const ma_hpf1_config, pHPF: *mut ma_hpf1) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_reinit(pConfig: *const ma_hpf1_config, pHPF: *mut ma_hpf1) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_process_pcm_frames(
        pHPF: *mut ma_hpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_get_latency(pHPF: *mut ma_hpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_hpf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_hpf2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_hpf2_init(pConfig: *const ma_hpf2_config, pHPF: *mut ma_hpf2) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_reinit(pConfig: *const ma_hpf2_config, pHPF: *mut ma_hpf2) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_process_pcm_frames(
        pHPF: *mut ma_hpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_get_latency(pHPF: *mut ma_hpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
extern "C" {
    pub fn ma_hpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_hpf_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub hpf1Count: ma_uint32,
    pub hpf2Count: ma_uint32,
    pub hpf1: [ma_hpf1; 1usize],
    pub hpf2: [ma_hpf2; 4usize],
}
impl ::std::fmt::Debug for ma_hpf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_hpf {{ format: {:?}, channels: {:?}, sampleRate: {:?}, hpf1Count: {:?}, hpf2Count: {:?}, hpf1: {:?}, hpf2: {:?} }}" , self . format , self . channels , self . sampleRate , self . hpf1Count , self . hpf2Count , self . hpf1 , self . hpf2 )
    }
}
extern "C" {
    pub fn ma_hpf_init(pConfig: *const ma_hpf_config, pHPF: *mut ma_hpf) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_reinit(pConfig: *const ma_hpf_config, pHPF: *mut ma_hpf) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_process_pcm_frames(
        pHPF: *mut ma_hpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_get_latency(pHPF: *mut ma_hpf) -> ma_uint32;
}
#[doc = "Band-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
extern "C" {
    pub fn ma_bpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_bpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_bpf2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_bpf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_bpf2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_bpf2_init(pConfig: *const ma_bpf2_config, pBPF: *mut ma_bpf2) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_reinit(pConfig: *const ma_bpf2_config, pBPF: *mut ma_bpf2) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_process_pcm_frames(
        pBPF: *mut ma_bpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_get_latency(pBPF: *mut ma_bpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
extern "C" {
    pub fn ma_bpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_bpf_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_bpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub bpf2Count: ma_uint32,
    pub bpf2: [ma_bpf2; 4usize],
}
impl ::std::fmt::Debug for ma_bpf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_bpf {{ format: {:?}, channels: {:?}, bpf2Count: {:?}, bpf2: {:?} }}",
            self.format, self.channels, self.bpf2Count, self.bpf2
        )
    }
}
extern "C" {
    pub fn ma_bpf_init(pConfig: *const ma_bpf_config, pBPF: *mut ma_bpf) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_reinit(pConfig: *const ma_bpf_config, pBPF: *mut ma_bpf) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_process_pcm_frames(
        pBPF: *mut ma_bpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_get_latency(pBPF: *mut ma_bpf) -> ma_uint32;
}
#[doc = "Notching Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_notch2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub q: f64,
    pub frequency: f64,
}
extern "C" {
    pub fn ma_notch2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        q: f64,
        frequency: f64,
    ) -> ma_notch2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_notch2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_notch2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_notch2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_notch2_init(pConfig: *const ma_notch2_config, pFilter: *mut ma_notch2) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_reinit(pConfig: *const ma_notch2_config, pFilter: *mut ma_notch2)
        -> ma_result;
}
extern "C" {
    pub fn ma_notch2_process_pcm_frames(
        pFilter: *mut ma_notch2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_get_latency(pFilter: *mut ma_notch2) -> ma_uint32;
}
#[doc = "Peaking EQ Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_peak2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub q: f64,
    pub frequency: f64,
}
extern "C" {
    pub fn ma_peak2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_peak2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_peak2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_peak2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_peak2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_peak2_init(pConfig: *const ma_peak2_config, pFilter: *mut ma_peak2) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_reinit(pConfig: *const ma_peak2_config, pFilter: *mut ma_peak2) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_process_pcm_frames(
        pFilter: *mut ma_peak2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_get_latency(pFilter: *mut ma_peak2) -> ma_uint32;
}
#[doc = "Low Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_loshelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
extern "C" {
    pub fn ma_loshelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_loshelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_loshelf2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_loshelf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_loshelf2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_loshelf2_init(
        pConfig: *const ma_loshelf2_config,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_reinit(
        pConfig: *const ma_loshelf2_config,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_process_pcm_frames(
        pFilter: *mut ma_loshelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_get_latency(pFilter: *mut ma_loshelf2) -> ma_uint32;
}
#[doc = "High Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hishelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
extern "C" {
    pub fn ma_hishelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_hishelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hishelf2 {
    pub bq: ma_biquad,
}
impl ::std::fmt::Debug for ma_hishelf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_hishelf2 {{ bq: {:?} }}", self.bq)
    }
}
extern "C" {
    pub fn ma_hishelf2_init(
        pConfig: *const ma_hishelf2_config,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_reinit(
        pConfig: *const ma_hishelf2_config,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_process_pcm_frames(
        pFilter: *mut ma_hishelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_get_latency(pFilter: *mut ma_hishelf2) -> ma_uint32;
}
#[doc = "Resampling"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_linear_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub lpfOrder: ma_uint32,
    pub lpfNyquistFactor: f64,
}
extern "C" {
    pub fn ma_linear_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_linear_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_linear_resampler {
    pub config: ma_linear_resampler_config,
    pub inAdvanceInt: ma_uint32,
    pub inAdvanceFrac: ma_uint32,
    pub inTimeInt: ma_uint32,
    pub inTimeFrac: ma_uint32,
    pub x0: ma_linear_resampler__bindgen_ty_1,
    pub x1: ma_linear_resampler__bindgen_ty_2,
    pub lpf: ma_lpf,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_1 {
    pub f32: [f32; 32usize],
    pub s16: [ma_int16; 32usize],
    _bindgen_union_align: [u32; 32usize],
}
impl ::std::fmt::Debug for ma_linear_resampler__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_linear_resampler__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_2 {
    pub f32: [f32; 32usize],
    pub s16: [ma_int16; 32usize],
    _bindgen_union_align: [u32; 32usize],
}
impl ::std::fmt::Debug for ma_linear_resampler__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_linear_resampler__bindgen_ty_2 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_linear_resampler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_linear_resampler {{ config: {:?}, inAdvanceInt: {:?}, inAdvanceFrac: {:?}, inTimeInt: {:?}, inTimeFrac: {:?}, x0: {:?}, x1: {:?}, lpf: {:?} }}" , self . config , self . inAdvanceInt , self . inAdvanceFrac , self . inTimeInt , self . inTimeFrac , self . x0 , self . x1 , self . lpf )
    }
}
extern "C" {
    pub fn ma_linear_resampler_init(
        pConfig: *const ma_linear_resampler_config,
        pResampler: *mut ma_linear_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_uninit(pResampler: *mut ma_linear_resampler);
}
extern "C" {
    pub fn ma_linear_resampler_process_pcm_frames(
        pResampler: *mut ma_linear_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_set_rate(
        pResampler: *mut ma_linear_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_set_rate_ratio(
        pResampler: *mut ma_linear_resampler,
        ratioInOut: f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_get_required_input_frame_count(
        pResampler: *mut ma_linear_resampler,
        outputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_linear_resampler_get_expected_output_frame_count(
        pResampler: *mut ma_linear_resampler,
        inputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_linear_resampler_get_input_latency(pResampler: *mut ma_linear_resampler)
        -> ma_uint64;
}
extern "C" {
    pub fn ma_linear_resampler_get_output_latency(
        pResampler: *mut ma_linear_resampler,
    ) -> ma_uint64;
}
pub const ma_resample_algorithm_linear: ma_resample_algorithm = 0;
pub const ma_resample_algorithm_speex: ma_resample_algorithm = 1;
pub type ma_resample_algorithm = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub algorithm: ma_resample_algorithm,
    pub linear: ma_resampler_config__bindgen_ty_1,
    pub speex: ma_resampler_config__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
    pub lpfNyquistFactor: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config__bindgen_ty_2 {
    pub quality: ::std::os::raw::c_int,
}
extern "C" {
    pub fn ma_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
        algorithm: ma_resample_algorithm,
    ) -> ma_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resampler {
    pub config: ma_resampler_config,
    pub state: ma_resampler__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resampler__bindgen_ty_1 {
    pub linear: ma_linear_resampler,
    pub speex: ma_resampler__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 200usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler__bindgen_ty_1__bindgen_ty_1 {
    pub pSpeexResamplerState: *mut ::std::os::raw::c_void,
}
impl ::std::fmt::Debug for ma_resampler__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_resampler__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_resampler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ma_resampler {{ config: {:?}, state: {:?} }}",
            self.config, self.state
        )
    }
}
extern "C" {
    pub fn ma_resampler_init(
        pConfig: *const ma_resampler_config,
        pResampler: *mut ma_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_uninit(pResampler: *mut ma_resampler);
}
extern "C" {
    pub fn ma_resampler_process_pcm_frames(
        pResampler: *mut ma_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_set_rate(
        pResampler: *mut ma_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_set_rate_ratio(pResampler: *mut ma_resampler, ratio: f32) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_get_required_input_frame_count(
        pResampler: *mut ma_resampler,
        outputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_resampler_get_expected_output_frame_count(
        pResampler: *mut ma_resampler,
        inputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_resampler_get_input_latency(pResampler: *mut ma_resampler) -> ma_uint64;
}
extern "C" {
    pub fn ma_resampler_get_output_latency(pResampler: *mut ma_resampler) -> ma_uint64;
}
#[doc = "Channel Conversion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_channel_converter_config {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub channelMapIn: [ma_channel; 32usize],
    pub channelMapOut: [ma_channel; 32usize],
    pub mixingMode: ma_channel_mix_mode,
    pub weights: [[f32; 32usize]; 32usize],
}
extern "C" {
    pub fn ma_channel_converter_config_init(
        format: ma_format,
        channelsIn: ma_uint32,
        pChannelMapIn: *const ma_channel,
        channelsOut: ma_uint32,
        pChannelMapOut: *const ma_channel,
        mixingMode: ma_channel_mix_mode,
    ) -> ma_channel_converter_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_channel_converter {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub channelMapIn: [ma_channel; 32usize],
    pub channelMapOut: [ma_channel; 32usize],
    pub mixingMode: ma_channel_mix_mode,
    pub weights: ma_channel_converter__bindgen_ty_1,
    pub isPassthrough: ma_bool8,
    pub isSimpleShuffle: ma_bool8,
    pub isSimpleMonoExpansion: ma_bool8,
    pub isStereoToMono: ma_bool8,
    pub shuffleTable: [ma_uint8; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_channel_converter__bindgen_ty_1 {
    pub f32: [[f32; 32usize]; 32usize],
    pub s16: [[ma_int32; 32usize]; 32usize],
    _bindgen_union_align: [u32; 1024usize],
}
impl ::std::fmt::Debug for ma_channel_converter__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_channel_converter__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_channel_converter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_channel_converter {{ format: {:?}, channelsIn: {:?}, channelsOut: {:?}, channelMapIn: [{}], channelMapOut: [{}], mixingMode: {:?}, weights: {:?}, isPassthrough: {:?}, isSimpleShuffle: {:?}, isSimpleMonoExpansion: {:?}, isStereoToMono: {:?}, shuffleTable: [{}] }}" , self . format , self . channelsIn , self . channelsOut , self . channelMapIn . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . channelMapOut . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . mixingMode , self . weights , self . isPassthrough , self . isSimpleShuffle , self . isSimpleMonoExpansion , self . isStereoToMono , self . shuffleTable . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
extern "C" {
    pub fn ma_channel_converter_init(
        pConfig: *const ma_channel_converter_config,
        pConverter: *mut ma_channel_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_uninit(pConverter: *mut ma_channel_converter);
}
extern "C" {
    pub fn ma_channel_converter_process_pcm_frames(
        pConverter: *mut ma_channel_converter,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
#[doc = "Data Conversion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config {
    pub formatIn: ma_format,
    pub formatOut: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub channelMapIn: [ma_channel; 32usize],
    pub channelMapOut: [ma_channel; 32usize],
    pub ditherMode: ma_dither_mode,
    pub channelMixMode: ma_channel_mix_mode,
    pub channelWeights: [[f32; 32usize]; 32usize],
    pub resampling: ma_data_converter_config__bindgen_ty_1,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config__bindgen_ty_1 {
    pub algorithm: ma_resample_algorithm,
    pub allowDynamicSampleRate: ma_bool32,
    pub linear: ma_data_converter_config__bindgen_ty_1__bindgen_ty_1,
    pub speex: ma_data_converter_config__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config__bindgen_ty_1__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
    pub lpfNyquistFactor: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config__bindgen_ty_1__bindgen_ty_2 {
    pub quality: ::std::os::raw::c_int,
}
extern "C" {
    pub fn ma_data_converter_config_init_default() -> ma_data_converter_config;
}
extern "C" {
    pub fn ma_data_converter_config_init(
        formatIn: ma_format,
        formatOut: ma_format,
        channelsIn: ma_uint32,
        channelsOut: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_data_converter_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_data_converter {
    pub config: ma_data_converter_config,
    pub channelConverter: ma_channel_converter,
    pub resampler: ma_resampler,
    pub hasPreFormatConversion: ma_bool8,
    pub hasPostFormatConversion: ma_bool8,
    pub hasChannelConverter: ma_bool8,
    pub hasResampler: ma_bool8,
    pub isPassthrough: ma_bool8,
}
impl ::std::fmt::Debug for ma_data_converter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_data_converter {{ config: {:?}, channelConverter: {:?}, resampler: {:?}, hasPreFormatConversion: {:?}, hasPostFormatConversion: {:?}, hasChannelConverter: {:?}, hasResampler: {:?}, isPassthrough: {:?} }}" , self . config , self . channelConverter , self . resampler , self . hasPreFormatConversion , self . hasPostFormatConversion , self . hasChannelConverter , self . hasResampler , self . isPassthrough )
    }
}
extern "C" {
    pub fn ma_data_converter_init(
        pConfig: *const ma_data_converter_config,
        pConverter: *mut ma_data_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_uninit(pConverter: *mut ma_data_converter);
}
extern "C" {
    pub fn ma_data_converter_process_pcm_frames(
        pConverter: *mut ma_data_converter,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_set_rate(
        pConverter: *mut ma_data_converter,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_set_rate_ratio(
        pConverter: *mut ma_data_converter,
        ratioInOut: f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_get_required_input_frame_count(
        pConverter: *mut ma_data_converter,
        outputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_data_converter_get_expected_output_frame_count(
        pConverter: *mut ma_data_converter,
        inputFrameCount: ma_uint64,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_data_converter_get_input_latency(pConverter: *mut ma_data_converter) -> ma_uint64;
}
extern "C" {
    pub fn ma_data_converter_get_output_latency(pConverter: *mut ma_data_converter) -> ma_uint64;
}
extern "C" {
    #[doc = "Format Conversion"]
    pub fn ma_pcm_u8_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_convert(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        sampleCount: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_convert_pcm_frames_format(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        frameCount: ma_uint64,
        channels: ma_uint32,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_deinterleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        pInterleavedPCMFrames: *const ::std::os::raw::c_void,
        ppDeinterleavedPCMFrames: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ma_interleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        ppDeinterleavedPCMFrames: *mut *const ::std::os::raw::c_void,
        pInterleavedPCMFrames: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = "Channel Maps"]
    pub fn ma_channel_map_init_blank(channels: ma_uint32, pChannelMap: *mut ma_channel);
}
extern "C" {
    pub fn ma_get_standard_channel_map(
        standardChannelMap: ma_standard_channel_map,
        channels: ma_uint32,
        pChannelMap: *mut ma_channel,
    );
}
extern "C" {
    pub fn ma_channel_map_copy(pOut: *mut ma_channel, pIn: *const ma_channel, channels: ma_uint32);
}
extern "C" {
    pub fn ma_channel_map_copy_or_default(
        pOut: *mut ma_channel,
        pIn: *const ma_channel,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_channel_map_valid(channels: ma_uint32, pChannelMap: *const ma_channel) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_equal(
        channels: ma_uint32,
        pChannelMapA: *const ma_channel,
        pChannelMapB: *const ma_channel,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_blank(channels: ma_uint32, pChannelMap: *const ma_channel) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_contains_channel_position(
        channels: ma_uint32,
        pChannelMap: *const ma_channel,
        channelPosition: ma_channel,
    ) -> ma_bool32;
}
extern "C" {
    #[doc = "Conversion Helpers"]
    pub fn ma_convert_frames(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        formatOut: ma_format,
        channelsOut: ma_uint32,
        sampleRateOut: ma_uint32,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        formatIn: ma_format,
        channelsIn: ma_uint32,
        sampleRateIn: ma_uint32,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_convert_frames_ex(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        pConfig: *const ma_data_converter_config,
    ) -> ma_uint64;
}
#[doc = "Ring Buffer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_rb {
    pub pBuffer: *mut ::std::os::raw::c_void,
    pub subbufferSizeInBytes: ma_uint32,
    pub subbufferCount: ma_uint32,
    pub subbufferStrideInBytes: ma_uint32,
    pub encodedReadOffset: ma_uint32,
    pub encodedWriteOffset: ma_uint32,
    pub ownsBuffer: ma_bool8,
    pub clearOnWriteAcquire: ma_bool8,
    pub allocationCallbacks: ma_allocation_callbacks,
}
extern "C" {
    pub fn ma_rb_init_ex(
        subbufferSizeInBytes: usize,
        subbufferCount: usize,
        subbufferStrideInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_init(
        bufferSizeInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_uninit(pRB: *mut ma_rb);
}
extern "C" {
    pub fn ma_rb_reset(pRB: *mut ma_rb);
}
extern "C" {
    pub fn ma_rb_acquire_read(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_commit_read(
        pRB: *mut ma_rb,
        sizeInBytes: usize,
        pBufferOut: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_acquire_write(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_commit_write(
        pRB: *mut ma_rb,
        sizeInBytes: usize,
        pBufferOut: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_seek_read(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_seek_write(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_pointer_distance(pRB: *mut ma_rb) -> ma_int32;
}
extern "C" {
    pub fn ma_rb_available_read(pRB: *mut ma_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_rb_available_write(pRB: *mut ma_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_size(pRB: *mut ma_rb) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_stride(pRB: *mut ma_rb) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_offset(pRB: *mut ma_rb, subbufferIndex: usize) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_ptr(
        pRB: *mut ma_rb,
        subbufferIndex: usize,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_pcm_rb {
    pub rb: ma_rb,
    pub format: ma_format,
    pub channels: ma_uint32,
}
extern "C" {
    pub fn ma_pcm_rb_init_ex(
        format: ma_format,
        channels: ma_uint32,
        subbufferSizeInFrames: ma_uint32,
        subbufferCount: ma_uint32,
        subbufferStrideInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_init(
        format: ma_format,
        channels: ma_uint32,
        bufferSizeInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_uninit(pRB: *mut ma_pcm_rb);
}
extern "C" {
    pub fn ma_pcm_rb_reset(pRB: *mut ma_pcm_rb);
}
extern "C" {
    pub fn ma_pcm_rb_acquire_read(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_commit_read(
        pRB: *mut ma_pcm_rb,
        sizeInFrames: ma_uint32,
        pBufferOut: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_acquire_write(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_commit_write(
        pRB: *mut ma_pcm_rb,
        sizeInFrames: ma_uint32,
        pBufferOut: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_seek_read(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_seek_write(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_pointer_distance(pRB: *mut ma_pcm_rb) -> ma_int32;
}
extern "C" {
    pub fn ma_pcm_rb_available_read(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_available_write(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_size(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_stride(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_offset(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_ptr(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_duplex_rb {
    pub rb: ma_pcm_rb,
}
extern "C" {
    pub fn ma_duplex_rb_init(
        inputSampleRate: ma_uint32,
        captureFormat: ma_format,
        captureChannels: ma_uint32,
        captureSampleRate: ma_uint32,
        capturePeriodSizeInFrames: ma_uint32,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_duplex_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_duplex_rb_uninit(pRB: *mut ma_duplex_rb) -> ma_result;
}
extern "C" {
    #[doc = "Miscellaneous Helpers"]
    pub fn ma_result_description(result: ma_result) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_malloc(
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_realloc(
        p: *mut ::std::os::raw::c_void,
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_aligned_malloc(
        sz: usize,
        alignment: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_aligned_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_get_format_name(format: ma_format) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_blend_f32(
        pOut: *mut f32,
        pInA: *mut f32,
        pInB: *mut f32,
        factor: f32,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_get_bytes_per_sample(format: ma_format) -> ma_uint32;
}
extern "C" {
    pub fn ma_log_level_to_string(logLevel: ma_uint32) -> *const ::std::os::raw::c_char;
}
pub const ma_backend_wasapi: ma_backend = 0;
pub const ma_backend_dsound: ma_backend = 1;
pub const ma_backend_winmm: ma_backend = 2;
pub const ma_backend_coreaudio: ma_backend = 3;
pub const ma_backend_sndio: ma_backend = 4;
pub const ma_backend_audio4: ma_backend = 5;
pub const ma_backend_oss: ma_backend = 6;
pub const ma_backend_pulseaudio: ma_backend = 7;
pub const ma_backend_alsa: ma_backend = 8;
pub const ma_backend_jack: ma_backend = 9;
pub const ma_backend_aaudio: ma_backend = 10;
pub const ma_backend_opensl: ma_backend = 11;
pub const ma_backend_webaudio: ma_backend = 12;
pub const ma_backend_custom: ma_backend = 13;
pub const ma_backend_null: ma_backend = 14;
pub type ma_backend = u32;
pub type ma_device_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ),
>;
pub type ma_stop_proc = ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device)>;
pub type ma_log_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pContext: *mut ma_context,
        pDevice: *mut ma_device,
        logLevel: ma_uint32,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub const ma_device_type_playback: ma_device_type = 1;
pub const ma_device_type_capture: ma_device_type = 2;
pub const ma_device_type_duplex: ma_device_type = 3;
pub const ma_device_type_loopback: ma_device_type = 4;
pub type ma_device_type = u32;
pub const ma_share_mode_shared: ma_share_mode = 0;
pub const ma_share_mode_exclusive: ma_share_mode = 1;
pub type ma_share_mode = u32;
pub const ma_ios_session_category_default: ma_ios_session_category = 0;
pub const ma_ios_session_category_none: ma_ios_session_category = 1;
pub const ma_ios_session_category_ambient: ma_ios_session_category = 2;
pub const ma_ios_session_category_solo_ambient: ma_ios_session_category = 3;
pub const ma_ios_session_category_playback: ma_ios_session_category = 4;
pub const ma_ios_session_category_record: ma_ios_session_category = 5;
pub const ma_ios_session_category_play_and_record: ma_ios_session_category = 6;
pub const ma_ios_session_category_multi_route: ma_ios_session_category = 7;
pub type ma_ios_session_category = u32;
pub const ma_ios_session_category_option_mix_with_others: ma_ios_session_category_option = 1;
pub const ma_ios_session_category_option_duck_others: ma_ios_session_category_option = 2;
pub const ma_ios_session_category_option_allow_bluetooth: ma_ios_session_category_option = 4;
pub const ma_ios_session_category_option_default_to_speaker: ma_ios_session_category_option = 8;
pub const ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others:
    ma_ios_session_category_option = 17;
pub const ma_ios_session_category_option_allow_bluetooth_a2dp: ma_ios_session_category_option = 32;
pub const ma_ios_session_category_option_allow_air_play: ma_ios_session_category_option = 64;
pub type ma_ios_session_category_option = u32;
pub const ma_opensl_stream_type_default: ma_opensl_stream_type = 0;
pub const ma_opensl_stream_type_voice: ma_opensl_stream_type = 1;
pub const ma_opensl_stream_type_system: ma_opensl_stream_type = 2;
pub const ma_opensl_stream_type_ring: ma_opensl_stream_type = 3;
pub const ma_opensl_stream_type_media: ma_opensl_stream_type = 4;
pub const ma_opensl_stream_type_alarm: ma_opensl_stream_type = 5;
pub const ma_opensl_stream_type_notification: ma_opensl_stream_type = 6;
pub type ma_opensl_stream_type = u32;
pub const ma_opensl_recording_preset_default: ma_opensl_recording_preset = 0;
pub const ma_opensl_recording_preset_generic: ma_opensl_recording_preset = 1;
pub const ma_opensl_recording_preset_camcorder: ma_opensl_recording_preset = 2;
pub const ma_opensl_recording_preset_voice_recognition: ma_opensl_recording_preset = 3;
pub const ma_opensl_recording_preset_voice_communication: ma_opensl_recording_preset = 4;
pub const ma_opensl_recording_preset_voice_unprocessed: ma_opensl_recording_preset = 5;
pub type ma_opensl_recording_preset = u32;
pub const ma_aaudio_usage_default: ma_aaudio_usage = 0;
pub const ma_aaudio_usage_announcement: ma_aaudio_usage = 1;
pub const ma_aaudio_usage_emergency: ma_aaudio_usage = 2;
pub const ma_aaudio_usage_safety: ma_aaudio_usage = 3;
pub const ma_aaudio_usage_vehicle_status: ma_aaudio_usage = 4;
pub const ma_aaudio_usage_alarm: ma_aaudio_usage = 5;
pub const ma_aaudio_usage_assistance_accessibility: ma_aaudio_usage = 6;
pub const ma_aaudio_usage_assistance_navigation_guidance: ma_aaudio_usage = 7;
pub const ma_aaudio_usage_assistance_sonification: ma_aaudio_usage = 8;
pub const ma_aaudio_usage_assitant: ma_aaudio_usage = 9;
pub const ma_aaudio_usage_game: ma_aaudio_usage = 10;
pub const ma_aaudio_usage_media: ma_aaudio_usage = 11;
pub const ma_aaudio_usage_notification: ma_aaudio_usage = 12;
pub const ma_aaudio_usage_notification_event: ma_aaudio_usage = 13;
pub const ma_aaudio_usage_notification_ringtone: ma_aaudio_usage = 14;
pub const ma_aaudio_usage_voice_communication: ma_aaudio_usage = 15;
pub const ma_aaudio_usage_voice_communication_signalling: ma_aaudio_usage = 16;
pub type ma_aaudio_usage = u32;
pub const ma_aaudio_content_type_default: ma_aaudio_content_type = 0;
pub const ma_aaudio_content_type_movie: ma_aaudio_content_type = 1;
pub const ma_aaudio_content_type_music: ma_aaudio_content_type = 2;
pub const ma_aaudio_content_type_sonification: ma_aaudio_content_type = 3;
pub const ma_aaudio_content_type_speech: ma_aaudio_content_type = 4;
pub type ma_aaudio_content_type = u32;
pub const ma_aaudio_input_preset_default: ma_aaudio_input_preset = 0;
pub const ma_aaudio_input_preset_generic: ma_aaudio_input_preset = 1;
pub const ma_aaudio_input_preset_camcorder: ma_aaudio_input_preset = 2;
pub const ma_aaudio_input_preset_unprocessed: ma_aaudio_input_preset = 3;
pub const ma_aaudio_input_preset_voice_recognition: ma_aaudio_input_preset = 4;
pub const ma_aaudio_input_preset_voice_communication: ma_aaudio_input_preset = 5;
pub const ma_aaudio_input_preset_voice_performance: ma_aaudio_input_preset = 6;
pub type ma_aaudio_input_preset = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_timer {
    pub counter: ma_int64,
    pub counterD: f64,
    _bindgen_union_align: u64,
}
impl ::std::fmt::Debug for ma_timer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_timer {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id {
    pub wasapi: [wchar_t; 64usize],
    pub dsound: [ma_uint8; 16usize],
    pub winmm: ma_uint32,
    pub alsa: [::std::os::raw::c_char; 256usize],
    pub pulse: [::std::os::raw::c_char; 256usize],
    pub jack: ::std::os::raw::c_int,
    pub coreaudio: [::std::os::raw::c_char; 256usize],
    pub sndio: [::std::os::raw::c_char; 256usize],
    pub audio4: [::std::os::raw::c_char; 256usize],
    pub oss: [::std::os::raw::c_char; 64usize],
    pub aaudio: ma_int32,
    pub opensl: ma_uint32,
    pub webaudio: [::std::os::raw::c_char; 32usize],
    pub custom: ma_device_id__bindgen_ty_1,
    pub nullbackend: ::std::os::raw::c_int,
    _bindgen_union_align: [u64; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id__bindgen_ty_1 {
    pub i: ::std::os::raw::c_int,
    pub s: [::std::os::raw::c_char; 256usize],
    pub p: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 32usize],
}
impl ::std::fmt::Debug for ma_device_id__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_device_id__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_device_id {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_device_id {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device_info {
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub isDefault: ma_bool32,
    pub formatCount: ma_uint32,
    pub formats: [ma_format; 6usize],
    pub minChannels: ma_uint32,
    pub maxChannels: ma_uint32,
    pub minSampleRate: ma_uint32,
    pub maxSampleRate: ma_uint32,
    pub nativeDataFormatCount: ma_uint32,
    pub nativeDataFormats: [ma_device_info__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_info__bindgen_ty_1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub flags: ma_uint32,
}
impl ::std::fmt::Debug for ma_device_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_device_info {{ id: {:?}, name: [{}], isDefault: {:?}, formatCount: {:?}, formats: {:?}, minChannels: {:?}, maxChannels: {:?}, minSampleRate: {:?}, maxSampleRate: {:?}, nativeDataFormatCount: {:?}, nativeDataFormats: [{}] }}" , self . id , self . name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . isDefault , self . formatCount , self . formats , self . minChannels , self . maxChannels , self . minSampleRate , self . maxSampleRate , self . nativeDataFormatCount , self . nativeDataFormats . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config {
    pub deviceType: ma_device_type,
    pub sampleRate: ma_uint32,
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periods: ma_uint32,
    pub performanceProfile: ma_performance_profile,
    pub noPreZeroedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub dataCallback: ma_device_callback_proc,
    pub stopCallback: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub resampling: ma_device_config__bindgen_ty_1,
    pub playback: ma_device_config__bindgen_ty_2,
    pub capture: ma_device_config__bindgen_ty_3,
    pub wasapi: ma_device_config__bindgen_ty_4,
    pub alsa: ma_device_config__bindgen_ty_5,
    pub pulse: ma_device_config__bindgen_ty_6,
    pub coreaudio: ma_device_config__bindgen_ty_7,
    pub opensl: ma_device_config__bindgen_ty_8,
    pub aaudio: ma_device_config__bindgen_ty_9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_1 {
    pub algorithm: ma_resample_algorithm,
    pub linear: ma_device_config__bindgen_ty_1__bindgen_ty_1,
    pub speex: ma_device_config__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_1__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_1__bindgen_ty_2 {
    pub quality: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_2 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 32usize],
    pub channelMixMode: ma_channel_mix_mode,
    pub shareMode: ma_share_mode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_3 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 32usize],
    pub channelMixMode: ma_channel_mix_mode,
    pub shareMode: ma_share_mode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_4 {
    pub noAutoConvertSRC: ma_bool8,
    pub noDefaultQualitySRC: ma_bool8,
    pub noAutoStreamRouting: ma_bool8,
    pub noHardwareOffloading: ma_bool8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_5 {
    pub noMMap: ma_bool32,
    pub noAutoFormat: ma_bool32,
    pub noAutoChannels: ma_bool32,
    pub noAutoResample: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_6 {
    pub pStreamNamePlayback: *const ::std::os::raw::c_char,
    pub pStreamNameCapture: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_7 {
    pub allowNominalSampleRateChange: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_8 {
    pub streamType: ma_opensl_stream_type,
    pub recordingPreset: ma_opensl_recording_preset,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_9 {
    pub usage: ma_aaudio_usage,
    pub contentType: ma_aaudio_content_type,
    pub inputPreset: ma_aaudio_input_preset,
}
pub type ma_enum_devices_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pInfo: *const ma_device_info,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_bool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_descriptor {
    pub pDeviceID: *const ma_device_id,
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub channelMap: [ma_channel; 32usize],
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periodCount: ma_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_backend_callbacks {
    pub onContextInit: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            pConfig: *const ma_context_config,
            pCallbacks: *mut ma_backend_callbacks,
        ) -> ma_result,
    >,
    pub onContextUninit:
        ::std::option::Option<unsafe extern "C" fn(pContext: *mut ma_context) -> ma_result>,
    pub onContextEnumerateDevices: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            callback: ma_enum_devices_callback_proc,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> ma_result,
    >,
    pub onContextGetDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            deviceType: ma_device_type,
            pDeviceID: *const ma_device_id,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
    pub onDeviceInit: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pConfig: *const ma_device_config,
            pDescriptorPlayback: *mut ma_device_descriptor,
            pDescriptorCapture: *mut ma_device_descriptor,
        ) -> ma_result,
    >,
    pub onDeviceUninit:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStart:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStop:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *mut ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesRead: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *const ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesWritten: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceAudioThread:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config {
    pub logCallback: ma_log_proc,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub alsa: ma_context_config__bindgen_ty_1,
    pub pulse: ma_context_config__bindgen_ty_2,
    pub coreaudio: ma_context_config__bindgen_ty_3,
    pub jack: ma_context_config__bindgen_ty_4,
    pub custom: ma_backend_callbacks,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_1 {
    pub useVerboseDeviceEnumeration: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_2 {
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub pServerName: *const ::std::os::raw::c_char,
    pub tryAutoSpawn: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_3 {
    pub sessionCategory: ma_ios_session_category,
    pub sessionCategoryOptions: ma_uint32,
    pub noAudioSessionActivate: ma_bool32,
    pub noAudioSessionDeactivate: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_4 {
    pub pClientName: *const ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context {
    pub callbacks: ma_backend_callbacks,
    pub backend: ma_backend,
    pub logCallback: ma_log_proc,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub deviceEnumLock: ma_mutex,
    pub deviceInfoLock: ma_mutex,
    pub deviceInfoCapacity: ma_uint32,
    pub playbackDeviceInfoCount: ma_uint32,
    pub captureDeviceInfoCount: ma_uint32,
    pub pDeviceInfos: *mut ma_device_info,
    pub isBackendAsynchronous: ma_bool8,
    pub onUninit:
        ::std::option::Option<unsafe extern "C" fn(pContext: *mut ma_context) -> ma_result>,
    pub onEnumDevices: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            callback: ma_enum_devices_callback_proc,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> ma_result,
    >,
    pub onGetDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            deviceType: ma_device_type,
            pDeviceID: *const ma_device_id,
            shareMode: ma_share_mode,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
    pub onDeviceInit: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            pConfig: *const ma_device_config,
            pDevice: *mut ma_device,
        ) -> ma_result,
    >,
    pub onDeviceUninit: ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device)>,
    pub onDeviceStart:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStop:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceMainLoop:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub __bindgen_anon_1: ma_context__bindgen_ty_1,
    pub __bindgen_anon_2: ma_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_1 {
    pub alsa: ma_context__bindgen_ty_1__bindgen_ty_1,
    pub pulse: ma_context__bindgen_ty_1__bindgen_ty_2,
    pub jack: ma_context__bindgen_ty_1__bindgen_ty_3,
    pub null_backend: ma_context__bindgen_ty_1__bindgen_ty_4,
    _bindgen_union_align: [u64; 62usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_1 {
    pub asoundSO: ma_handle,
    pub snd_pcm_open: ma_proc,
    pub snd_pcm_close: ma_proc,
    pub snd_pcm_hw_params_sizeof: ma_proc,
    pub snd_pcm_hw_params_any: ma_proc,
    pub snd_pcm_hw_params_set_format: ma_proc,
    pub snd_pcm_hw_params_set_format_first: ma_proc,
    pub snd_pcm_hw_params_get_format_mask: ma_proc,
    pub snd_pcm_hw_params_set_channels_near: ma_proc,
    pub snd_pcm_hw_params_set_rate_resample: ma_proc,
    pub snd_pcm_hw_params_set_rate_near: ma_proc,
    pub snd_pcm_hw_params_set_buffer_size_near: ma_proc,
    pub snd_pcm_hw_params_set_periods_near: ma_proc,
    pub snd_pcm_hw_params_set_access: ma_proc,
    pub snd_pcm_hw_params_get_format: ma_proc,
    pub snd_pcm_hw_params_get_channels: ma_proc,
    pub snd_pcm_hw_params_get_channels_min: ma_proc,
    pub snd_pcm_hw_params_get_channels_max: ma_proc,
    pub snd_pcm_hw_params_get_rate: ma_proc,
    pub snd_pcm_hw_params_get_rate_min: ma_proc,
    pub snd_pcm_hw_params_get_rate_max: ma_proc,
    pub snd_pcm_hw_params_get_buffer_size: ma_proc,
    pub snd_pcm_hw_params_get_periods: ma_proc,
    pub snd_pcm_hw_params_get_access: ma_proc,
    pub snd_pcm_hw_params: ma_proc,
    pub snd_pcm_sw_params_sizeof: ma_proc,
    pub snd_pcm_sw_params_current: ma_proc,
    pub snd_pcm_sw_params_get_boundary: ma_proc,
    pub snd_pcm_sw_params_set_avail_min: ma_proc,
    pub snd_pcm_sw_params_set_start_threshold: ma_proc,
    pub snd_pcm_sw_params_set_stop_threshold: ma_proc,
    pub snd_pcm_sw_params: ma_proc,
    pub snd_pcm_format_mask_sizeof: ma_proc,
    pub snd_pcm_format_mask_test: ma_proc,
    pub snd_pcm_get_chmap: ma_proc,
    pub snd_pcm_state: ma_proc,
    pub snd_pcm_prepare: ma_proc,
    pub snd_pcm_start: ma_proc,
    pub snd_pcm_drop: ma_proc,
    pub snd_pcm_drain: ma_proc,
    pub snd_device_name_hint: ma_proc,
    pub snd_device_name_get_hint: ma_proc,
    pub snd_card_get_index: ma_proc,
    pub snd_device_name_free_hint: ma_proc,
    pub snd_pcm_mmap_begin: ma_proc,
    pub snd_pcm_mmap_commit: ma_proc,
    pub snd_pcm_recover: ma_proc,
    pub snd_pcm_readi: ma_proc,
    pub snd_pcm_writei: ma_proc,
    pub snd_pcm_avail: ma_proc,
    pub snd_pcm_avail_update: ma_proc,
    pub snd_pcm_wait: ma_proc,
    pub snd_pcm_info: ma_proc,
    pub snd_pcm_info_sizeof: ma_proc,
    pub snd_pcm_info_get_name: ma_proc,
    pub snd_config_update_free_global: ma_proc,
    pub internalDeviceEnumLock: ma_mutex,
    pub useVerboseDeviceEnumeration: ma_bool32,
}
impl ::std::fmt::Debug for ma_context__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_context__bindgen_ty_1__bindgen_ty_1 {{ asoundSO: {:?}, snd_pcm_open: {:?}, snd_pcm_close: {:?}, snd_pcm_hw_params_sizeof: {:?}, snd_pcm_hw_params_any: {:?}, snd_pcm_hw_params_set_format: {:?}, snd_pcm_hw_params_set_format_first: {:?}, snd_pcm_hw_params_get_format_mask: {:?}, snd_pcm_hw_params_set_channels_near: {:?}, snd_pcm_hw_params_set_rate_resample: {:?}, snd_pcm_hw_params_set_rate_near: {:?}, snd_pcm_hw_params_set_buffer_size_near: {:?}, snd_pcm_hw_params_set_periods_near: {:?}, snd_pcm_hw_params_set_access: {:?}, snd_pcm_hw_params_get_format: {:?}, snd_pcm_hw_params_get_channels: {:?}, snd_pcm_hw_params_get_channels_min: {:?}, snd_pcm_hw_params_get_channels_max: {:?}, snd_pcm_hw_params_get_rate: {:?}, snd_pcm_hw_params_get_rate_min: {:?}, snd_pcm_hw_params_get_rate_max: {:?}, snd_pcm_hw_params_get_buffer_size: {:?}, snd_pcm_hw_params_get_periods: {:?}, snd_pcm_hw_params_get_access: {:?}, snd_pcm_hw_params: {:?}, snd_pcm_sw_params_sizeof: {:?}, snd_pcm_sw_params_current: {:?}, snd_pcm_sw_params_get_boundary: {:?}, snd_pcm_sw_params_set_avail_min: {:?}, snd_pcm_sw_params_set_start_threshold: {:?}, snd_pcm_sw_params_set_stop_threshold: {:?}, snd_pcm_sw_params: {:?}, snd_pcm_format_mask_sizeof: {:?}, snd_pcm_format_mask_test: {:?}, snd_pcm_get_chmap: {:?}, snd_pcm_state: {:?}, snd_pcm_prepare: {:?}, snd_pcm_start: {:?}, snd_pcm_drop: {:?}, snd_pcm_drain: {:?}, snd_device_name_hint: {:?}, snd_device_name_get_hint: {:?}, snd_card_get_index: {:?}, snd_device_name_free_hint: {:?}, snd_pcm_mmap_begin: {:?}, snd_pcm_mmap_commit: {:?}, snd_pcm_recover: {:?}, snd_pcm_readi: {:?}, snd_pcm_writei: {:?}, snd_pcm_avail: {:?}, snd_pcm_avail_update: {:?}, snd_pcm_wait: {:?}, snd_pcm_info: {:?}, snd_pcm_info_sizeof: {:?}, snd_pcm_info_get_name: {:?}, snd_config_update_free_global: {:?}, internalDeviceEnumLock: {:?}, useVerboseDeviceEnumeration: {:?} }}" , self . asoundSO , self . snd_pcm_open , self . snd_pcm_close , self . snd_pcm_hw_params_sizeof , self . snd_pcm_hw_params_any , self . snd_pcm_hw_params_set_format , self . snd_pcm_hw_params_set_format_first , self . snd_pcm_hw_params_get_format_mask , self . snd_pcm_hw_params_set_channels_near , self . snd_pcm_hw_params_set_rate_resample , self . snd_pcm_hw_params_set_rate_near , self . snd_pcm_hw_params_set_buffer_size_near , self . snd_pcm_hw_params_set_periods_near , self . snd_pcm_hw_params_set_access , self . snd_pcm_hw_params_get_format , self . snd_pcm_hw_params_get_channels , self . snd_pcm_hw_params_get_channels_min , self . snd_pcm_hw_params_get_channels_max , self . snd_pcm_hw_params_get_rate , self . snd_pcm_hw_params_get_rate_min , self . snd_pcm_hw_params_get_rate_max , self . snd_pcm_hw_params_get_buffer_size , self . snd_pcm_hw_params_get_periods , self . snd_pcm_hw_params_get_access , self . snd_pcm_hw_params , self . snd_pcm_sw_params_sizeof , self . snd_pcm_sw_params_current , self . snd_pcm_sw_params_get_boundary , self . snd_pcm_sw_params_set_avail_min , self . snd_pcm_sw_params_set_start_threshold , self . snd_pcm_sw_params_set_stop_threshold , self . snd_pcm_sw_params , self . snd_pcm_format_mask_sizeof , self . snd_pcm_format_mask_test , self . snd_pcm_get_chmap , self . snd_pcm_state , self . snd_pcm_prepare , self . snd_pcm_start , self . snd_pcm_drop , self . snd_pcm_drain , self . snd_device_name_hint , self . snd_device_name_get_hint , self . snd_card_get_index , self . snd_device_name_free_hint , self . snd_pcm_mmap_begin , self . snd_pcm_mmap_commit , self . snd_pcm_recover , self . snd_pcm_readi , self . snd_pcm_writei , self . snd_pcm_avail , self . snd_pcm_avail_update , self . snd_pcm_wait , self . snd_pcm_info , self . snd_pcm_info_sizeof , self . snd_pcm_info_get_name , self . snd_config_update_free_global , self . internalDeviceEnumLock , self . useVerboseDeviceEnumeration )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_2 {
    pub pulseSO: ma_handle,
    pub pa_mainloop_new: ma_proc,
    pub pa_mainloop_free: ma_proc,
    pub pa_mainloop_quit: ma_proc,
    pub pa_mainloop_get_api: ma_proc,
    pub pa_mainloop_iterate: ma_proc,
    pub pa_mainloop_wakeup: ma_proc,
    pub pa_threaded_mainloop_new: ma_proc,
    pub pa_threaded_mainloop_free: ma_proc,
    pub pa_threaded_mainloop_start: ma_proc,
    pub pa_threaded_mainloop_stop: ma_proc,
    pub pa_threaded_mainloop_lock: ma_proc,
    pub pa_threaded_mainloop_unlock: ma_proc,
    pub pa_threaded_mainloop_wait: ma_proc,
    pub pa_threaded_mainloop_signal: ma_proc,
    pub pa_threaded_mainloop_accept: ma_proc,
    pub pa_threaded_mainloop_get_retval: ma_proc,
    pub pa_threaded_mainloop_get_api: ma_proc,
    pub pa_threaded_mainloop_in_thread: ma_proc,
    pub pa_threaded_mainloop_set_name: ma_proc,
    pub pa_context_new: ma_proc,
    pub pa_context_unref: ma_proc,
    pub pa_context_connect: ma_proc,
    pub pa_context_disconnect: ma_proc,
    pub pa_context_set_state_callback: ma_proc,
    pub pa_context_get_state: ma_proc,
    pub pa_context_get_sink_info_list: ma_proc,
    pub pa_context_get_source_info_list: ma_proc,
    pub pa_context_get_sink_info_by_name: ma_proc,
    pub pa_context_get_source_info_by_name: ma_proc,
    pub pa_operation_unref: ma_proc,
    pub pa_operation_get_state: ma_proc,
    pub pa_channel_map_init_extend: ma_proc,
    pub pa_channel_map_valid: ma_proc,
    pub pa_channel_map_compatible: ma_proc,
    pub pa_stream_new: ma_proc,
    pub pa_stream_unref: ma_proc,
    pub pa_stream_connect_playback: ma_proc,
    pub pa_stream_connect_record: ma_proc,
    pub pa_stream_disconnect: ma_proc,
    pub pa_stream_get_state: ma_proc,
    pub pa_stream_get_sample_spec: ma_proc,
    pub pa_stream_get_channel_map: ma_proc,
    pub pa_stream_get_buffer_attr: ma_proc,
    pub pa_stream_set_buffer_attr: ma_proc,
    pub pa_stream_get_device_name: ma_proc,
    pub pa_stream_set_write_callback: ma_proc,
    pub pa_stream_set_read_callback: ma_proc,
    pub pa_stream_flush: ma_proc,
    pub pa_stream_drain: ma_proc,
    pub pa_stream_is_corked: ma_proc,
    pub pa_stream_cork: ma_proc,
    pub pa_stream_trigger: ma_proc,
    pub pa_stream_begin_write: ma_proc,
    pub pa_stream_write: ma_proc,
    pub pa_stream_peek: ma_proc,
    pub pa_stream_drop: ma_proc,
    pub pa_stream_writable_size: ma_proc,
    pub pa_stream_readable_size: ma_proc,
    pub pMainLoop: ma_ptr,
    pub pPulseContext: ma_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_3 {
    pub jackSO: ma_handle,
    pub jack_client_open: ma_proc,
    pub jack_client_close: ma_proc,
    pub jack_client_name_size: ma_proc,
    pub jack_set_process_callback: ma_proc,
    pub jack_set_buffer_size_callback: ma_proc,
    pub jack_on_shutdown: ma_proc,
    pub jack_get_sample_rate: ma_proc,
    pub jack_get_buffer_size: ma_proc,
    pub jack_get_ports: ma_proc,
    pub jack_activate: ma_proc,
    pub jack_deactivate: ma_proc,
    pub jack_connect: ma_proc,
    pub jack_port_register: ma_proc,
    pub jack_port_name: ma_proc,
    pub jack_port_get_buffer: ma_proc,
    pub jack_free: ma_proc,
    pub pClientName: *mut ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_4 {
    pub _unused: ::std::os::raw::c_int,
}
impl ::std::fmt::Debug for ma_context__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_context__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_2 {
    pub posix: ma_context__bindgen_ty_2__bindgen_ty_1,
    pub _unused: ::std::os::raw::c_int,
    _bindgen_union_align: [u64; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_2__bindgen_ty_1 {
    pub pthreadSO: ma_handle,
    pub pthread_create: ma_proc,
    pub pthread_join: ma_proc,
    pub pthread_mutex_init: ma_proc,
    pub pthread_mutex_destroy: ma_proc,
    pub pthread_mutex_lock: ma_proc,
    pub pthread_mutex_unlock: ma_proc,
    pub pthread_cond_init: ma_proc,
    pub pthread_cond_destroy: ma_proc,
    pub pthread_cond_wait: ma_proc,
    pub pthread_cond_signal: ma_proc,
    pub pthread_attr_init: ma_proc,
    pub pthread_attr_destroy: ma_proc,
    pub pthread_attr_setschedpolicy: ma_proc,
    pub pthread_attr_getschedparam: ma_proc,
    pub pthread_attr_setschedparam: ma_proc,
}
impl ::std::fmt::Debug for ma_context__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_context__bindgen_ty_2 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_context {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_context {{ callbacks: {:?}, backend: {:?}, logCallback: {:?}, threadPriority: {:?}, threadStackSize: {:?}, pUserData: {:?}, allocationCallbacks: {:?}, deviceEnumLock: {:?}, deviceInfoLock: {:?}, deviceInfoCapacity: {:?}, playbackDeviceInfoCount: {:?}, captureDeviceInfoCount: {:?}, pDeviceInfos: {:?}, isBackendAsynchronous: {:?}, onUninit: {:?}, onEnumDevices: {:?}, onGetDeviceInfo: {:?}, onDeviceInit: {:?}, onDeviceUninit: {:?}, onDeviceStart: {:?}, onDeviceStop: {:?}, onDeviceMainLoop: {:?}, __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?} }}" , self . callbacks , self . backend , self . logCallback , self . threadPriority , self . threadStackSize , self . pUserData , self . allocationCallbacks , self . deviceEnumLock , self . deviceInfoLock , self . deviceInfoCapacity , self . playbackDeviceInfoCount , self . captureDeviceInfoCount , self . pDeviceInfos , self . isBackendAsynchronous , self . onUninit , self . onEnumDevices , self . onGetDeviceInfo , self . onDeviceInit , self . onDeviceUninit , self . onDeviceStart , self . onDeviceStop , self . onDeviceMainLoop , self . __bindgen_anon_1 , self . __bindgen_anon_2 )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device {
    pub pContext: *mut ma_context,
    pub type_: ma_device_type,
    pub sampleRate: ma_uint32,
    pub state: ma_uint32,
    pub onData: ma_device_callback_proc,
    pub onStop: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub lock: ma_mutex,
    pub wakeupEvent: ma_event,
    pub startEvent: ma_event,
    pub stopEvent: ma_event,
    pub thread: ma_thread,
    pub workResult: ma_result,
    pub usingDefaultSampleRate: ma_bool8,
    pub usingDefaultBufferSize: ma_bool8,
    pub usingDefaultPeriods: ma_bool8,
    pub isOwnerOfContext: ma_bool8,
    pub noPreZeroedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub masterVolumeFactor: f32,
    pub duplexRB: ma_duplex_rb,
    pub resampling: ma_device__bindgen_ty_1,
    pub playback: ma_device__bindgen_ty_2,
    pub capture: ma_device__bindgen_ty_3,
    pub __bindgen_anon_1: ma_device__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1 {
    pub algorithm: ma_resample_algorithm,
    pub linear: ma_device__bindgen_ty_1__bindgen_ty_1,
    pub speex: ma_device__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1__bindgen_ty_2 {
    pub quality: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_2 {
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 32usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 32usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub converter: ma_data_converter,
    pub usingDefaultFormat: ma_bool8,
    pub usingDefaultChannels: ma_bool8,
    pub usingDefaultChannelMap: ma_bool8,
}
impl ::std::fmt::Debug for ma_device__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_device__bindgen_ty_2 {{ id: {:?}, name: [{}], shareMode: {:?}, format: {:?}, channels: {:?}, channelMap: [{}], internalFormat: {:?}, internalChannels: {:?}, internalSampleRate: {:?}, internalChannelMap: [{}], internalPeriodSizeInFrames: {:?}, internalPeriods: {:?}, channelMixMode: {:?}, converter: {:?}, usingDefaultFormat: {:?}, usingDefaultChannels: {:?}, usingDefaultChannelMap: {:?} }}" , self . id , self . name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . shareMode , self . format , self . channels , self . channelMap . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . internalFormat , self . internalChannels , self . internalSampleRate , self . internalChannelMap . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . internalPeriodSizeInFrames , self . internalPeriods , self . channelMixMode , self . converter , self . usingDefaultFormat , self . usingDefaultChannels , self . usingDefaultChannelMap )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_3 {
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 32usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 32usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub converter: ma_data_converter,
    pub usingDefaultFormat: ma_bool8,
    pub usingDefaultChannels: ma_bool8,
    pub usingDefaultChannelMap: ma_bool8,
}
impl ::std::fmt::Debug for ma_device__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_device__bindgen_ty_3 {{ id: {:?}, name: [{}], shareMode: {:?}, format: {:?}, channels: {:?}, channelMap: [{}], internalFormat: {:?}, internalChannels: {:?}, internalSampleRate: {:?}, internalChannelMap: [{}], internalPeriodSizeInFrames: {:?}, internalPeriods: {:?}, channelMixMode: {:?}, converter: {:?}, usingDefaultFormat: {:?}, usingDefaultChannels: {:?}, usingDefaultChannelMap: {:?} }}" , self . id , self . name . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . shareMode , self . format , self . channels , self . channelMap . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . internalFormat , self . internalChannels , self . internalSampleRate , self . internalChannelMap . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . internalPeriodSizeInFrames , self . internalPeriods , self . channelMixMode , self . converter , self . usingDefaultFormat , self . usingDefaultChannels , self . usingDefaultChannelMap )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device__bindgen_ty_4 {
    pub alsa: ma_device__bindgen_ty_4__bindgen_ty_1,
    pub pulse: ma_device__bindgen_ty_4__bindgen_ty_2,
    pub jack: ma_device__bindgen_ty_4__bindgen_ty_3,
    pub null_device: ma_device__bindgen_ty_4__bindgen_ty_4,
    _bindgen_union_align: [u64; 67usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_1 {
    pub pPCMPlayback: ma_ptr,
    pub pPCMCapture: ma_ptr,
    pub isUsingMMapPlayback: ma_bool8,
    pub isUsingMMapCapture: ma_bool8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_2 {
    pub pStreamPlayback: ma_ptr,
    pub pStreamCapture: ma_ptr,
    pub duplexRB: ma_pcm_rb,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_3 {
    pub pClient: ma_ptr,
    pub pPortsPlayback: [ma_ptr; 32usize],
    pub pPortsCapture: [ma_ptr; 32usize],
    pub pIntermediaryBufferPlayback: *mut f32,
    pub pIntermediaryBufferCapture: *mut f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_4 {
    pub deviceThread: ma_thread,
    pub operationEvent: ma_event,
    pub operationCompletionEvent: ma_event,
    pub operationSemaphore: ma_semaphore,
    pub operation: ma_uint32,
    pub operationResult: ma_result,
    pub timer: ma_timer,
    pub priorRunTime: f64,
    pub currentPeriodFramesRemainingPlayback: ma_uint32,
    pub currentPeriodFramesRemainingCapture: ma_uint32,
    pub lastProcessedFramePlayback: ma_uint64,
    pub lastProcessedFrameCapture: ma_uint64,
    pub isStarted: ma_bool32,
}
impl ::std::fmt::Debug for ma_device__bindgen_ty_4__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_device__bindgen_ty_4__bindgen_ty_4 {{ deviceThread: {:?}, operationEvent: {:?}, operationCompletionEvent: {:?}, operationSemaphore: {:?}, operation: {:?}, operationResult: {:?}, timer: {:?}, priorRunTime: {:?}, currentPeriodFramesRemainingPlayback: {:?}, currentPeriodFramesRemainingCapture: {:?}, lastProcessedFramePlayback: {:?}, lastProcessedFrameCapture: {:?}, isStarted: {:?} }}" , self . deviceThread , self . operationEvent , self . operationCompletionEvent , self . operationSemaphore , self . operation , self . operationResult , self . timer , self . priorRunTime , self . currentPeriodFramesRemainingPlayback , self . currentPeriodFramesRemainingCapture , self . lastProcessedFramePlayback , self . lastProcessedFrameCapture , self . isStarted )
    }
}
impl ::std::fmt::Debug for ma_device__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ma_device__bindgen_ty_4 {{ union }}")
    }
}
impl ::std::fmt::Debug for ma_device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "ma_device {{ pContext: {:?}, type: {:?}, sampleRate: {:?}, state: {:?}, onData: {:?}, onStop: {:?}, pUserData: {:?}, lock: {:?}, wakeupEvent: {:?}, startEvent: {:?}, stopEvent: {:?}, thread: {:?}, workResult: {:?}, usingDefaultSampleRate: {:?}, usingDefaultBufferSize: {:?}, usingDefaultPeriods: {:?}, isOwnerOfContext: {:?}, noPreZeroedOutputBuffer: {:?}, noClip: {:?}, masterVolumeFactor: {:?}, duplexRB: {:?}, resampling: {:?}, playback: {:?}, capture: {:?}, __bindgen_anon_1: {:?} }}" , self . pContext , self . type_ , self . sampleRate , self . state , self . onData , self . onStop , self . pUserData , self . lock , self . wakeupEvent , self . startEvent , self . stopEvent , self . thread , self . workResult , self . usingDefaultSampleRate , self . usingDefaultBufferSize , self . usingDefaultPeriods , self . isOwnerOfContext , self . noPreZeroedOutputBuffer , self . noClip , self . masterVolumeFactor , self . duplexRB , self . resampling , self . playback , self . capture , self . __bindgen_anon_1 )
    }
}
extern "C" {
    pub fn ma_context_config_init() -> ma_context_config;
}
extern "C" {
    pub fn ma_context_init(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pConfig: *const ma_context_config,
        pContext: *mut ma_context,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_uninit(pContext: *mut ma_context) -> ma_result;
}
extern "C" {
    pub fn ma_context_sizeof() -> usize;
}
extern "C" {
    pub fn ma_context_enumerate_devices(
        pContext: *mut ma_context,
        callback: ma_enum_devices_callback_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_get_devices(
        pContext: *mut ma_context,
        ppPlaybackDeviceInfos: *mut *mut ma_device_info,
        pPlaybackDeviceCount: *mut ma_uint32,
        ppCaptureDeviceInfos: *mut *mut ma_device_info,
        pCaptureDeviceCount: *mut ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_get_device_info(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pDeviceID: *const ma_device_id,
        shareMode: ma_share_mode,
        pDeviceInfo: *mut ma_device_info,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_is_loopback_supported(pContext: *mut ma_context) -> ma_bool32;
}
extern "C" {
    pub fn ma_device_config_init(deviceType: ma_device_type) -> ma_device_config;
}
extern "C" {
    pub fn ma_device_init(
        pContext: *mut ma_context,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_init_ex(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pContextConfig: *const ma_context_config,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_uninit(pDevice: *mut ma_device);
}
extern "C" {
    pub fn ma_device_start(pDevice: *mut ma_device) -> ma_result;
}
extern "C" {
    pub fn ma_device_stop(pDevice: *mut ma_device) -> ma_result;
}
extern "C" {
    pub fn ma_device_is_started(pDevice: *const ma_device) -> ma_bool32;
}
extern "C" {
    pub fn ma_device_get_state(pDevice: *const ma_device) -> ma_uint32;
}
extern "C" {
    pub fn ma_device_set_master_volume(pDevice: *mut ma_device, volume: f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_get_master_volume(pDevice: *mut ma_device, pVolume: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_set_master_gain_db(pDevice: *mut ma_device, gainDB: f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_get_master_gain_db(pDevice: *mut ma_device, pGainDB: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_handle_backend_data_callback(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_get_backend_name(backend: ma_backend) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_is_backend_enabled(backend: ma_backend) -> ma_bool32;
}
extern "C" {
    pub fn ma_get_enabled_backends(
        pBackends: *mut ma_backend,
        backendCap: usize,
        pBackendCount: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_is_loopback_supported(backend: ma_backend) -> ma_bool32;
}
extern "C" {
    pub fn ma_spinlock_lock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_spinlock_lock_noyield(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_spinlock_unlock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_mutex_init(pMutex: *mut ma_mutex) -> ma_result;
}
extern "C" {
    pub fn ma_mutex_uninit(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_mutex_lock(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_mutex_unlock(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_event_init(pEvent: *mut ma_event) -> ma_result;
}
extern "C" {
    pub fn ma_event_uninit(pEvent: *mut ma_event);
}
extern "C" {
    pub fn ma_event_wait(pEvent: *mut ma_event) -> ma_result;
}
extern "C" {
    pub fn ma_event_signal(pEvent: *mut ma_event) -> ma_result;
}
extern "C" {
    #[doc = "Utiltities"]
    pub fn ma_scale_buffer_size(baseBufferSize: ma_uint32, scale: f32) -> ma_uint32;
}
extern "C" {
    pub fn ma_calculate_buffer_size_in_milliseconds_from_frames(
        bufferSizeInFrames: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_calculate_buffer_size_in_frames_from_milliseconds(
        bufferSizeInMilliseconds: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_copy_pcm_frames(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_silence_pcm_frames(
        p: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_offset_pcm_frames_ptr(
        p: *mut ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_offset_pcm_frames_const_ptr(
        p: *const ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_clip_samples_f32(p: *mut f32, sampleCount: ma_uint64);
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_u8(
        pSamplesOut: *mut ma_uint8,
        pSamplesIn: *const ma_uint8,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s16(
        pSamplesOut: *mut ma_int16,
        pSamplesIn: *const ma_int16,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s24(
        pSamplesOut: *mut ::std::os::raw::c_void,
        pSamplesIn: *const ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s32(
        pSamplesOut: *mut ma_int32,
        pSamplesIn: *const ma_int32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_f32(
        pSamplesOut: *mut f32,
        pSamplesIn: *const f32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_u8(pSamples: *mut ma_uint8, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_s16(pSamples: *mut ma_int16, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_s24(
        pSamples: *mut ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_s32(pSamples: *mut ma_int32, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_f32(pSamples: *mut f32, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_u8(
        pPCMFramesOut: *mut ma_uint8,
        pPCMFramesIn: *const ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s16(
        pPCMFramesOut: *mut ma_int16,
        pPCMFramesIn: *const ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s24(
        pPCMFramesOut: *mut ::std::os::raw::c_void,
        pPCMFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s32(
        pPCMFramesOut: *mut ma_int32,
        pPCMFramesIn: *const ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_f32(
        pPCMFramesOut: *mut f32,
        pPCMFramesIn: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames(
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_u8(
        pFrames: *mut ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s16(
        pFrames: *mut ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s24(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s32(
        pFrames: *mut ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_f32(
        pFrames: *mut f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_factor_to_gain_db(factor: f32) -> f32;
}
extern "C" {
    pub fn ma_gain_db_to_factor(gain: f32) -> f32;
}
pub type ma_data_source = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_callbacks {
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFramesOut: *mut ::std::os::raw::c_void,
            frameCount: ma_uint64,
            pFramesRead: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, frameIndex: ma_uint64) -> ma_result,
    >,
    pub onMap: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            ppFramesOut: *mut *mut ::std::os::raw::c_void,
            pFrameCount: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onUnmap: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, frameCount: ma_uint64) -> ma_result,
    >,
    pub onGetDataFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFormat: *mut ma_format,
            pChannels: *mut ma_uint32,
            pSampleRate: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onGetCursor: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pCursor: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onGetLength: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pLength: *mut ma_uint64,
        ) -> ma_result,
    >,
}
extern "C" {
    pub fn ma_data_source_read_pcm_frames(
        pDataSource: *mut ma_data_source,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
        loop_: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_seek_pcm_frames(
        pDataSource: *mut ma_data_source,
        frameCount: ma_uint64,
        pFramesSeeked: *mut ma_uint64,
        loop_: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_seek_to_pcm_frame(
        pDataSource: *mut ma_data_source,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_map(
        pDataSource: *mut ma_data_source,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_unmap(
        pDataSource: *mut ma_data_source,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_data_format(
        pDataSource: *mut ma_data_source,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_cursor_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_length_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
}
extern "C" {
    pub fn ma_audio_buffer_config_init(
        format: ma_format,
        channels: ma_uint32,
        sizeInFrames: ma_uint64,
        pData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_audio_buffer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer {
    pub ds: ma_data_source_callbacks,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub cursor: ma_uint64,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub ownsData: ma_bool32,
    pub _pExtraData: [ma_uint8; 1usize],
}
extern "C" {
    pub fn ma_audio_buffer_init(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_init_copy(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_alloc_and_init(
        pConfig: *const ma_audio_buffer_config,
        ppAudioBuffer: *mut *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_uninit(pAudioBuffer: *mut ma_audio_buffer);
}
extern "C" {
    pub fn ma_audio_buffer_uninit_and_free(pAudioBuffer: *mut ma_audio_buffer);
}
extern "C" {
    pub fn ma_audio_buffer_read_pcm_frames(
        pAudioBuffer: *mut ma_audio_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        loop_: ma_bool32,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_audio_buffer_seek_to_pcm_frame(
        pAudioBuffer: *mut ma_audio_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_map(
        pAudioBuffer: *mut ma_audio_buffer,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_unmap(
        pAudioBuffer: *mut ma_audio_buffer,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_at_end(pAudioBuffer: *mut ma_audio_buffer) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_get_available_frames(
        pAudioBuffer: *mut ma_audio_buffer,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
#[doc = "VFS"]
#[doc = "==="]
#[doc = ""]
#[doc = "The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely"]
#[doc = "appropriate for a given situation."]
pub type ma_vfs = ::std::os::raw::c_void;
pub type ma_vfs_file = ma_handle;
pub const ma_seek_origin_start: ma_seek_origin = 0;
pub const ma_seek_origin_current: ma_seek_origin = 1;
pub const ma_seek_origin_end: ma_seek_origin = 2;
pub type ma_seek_origin = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_file_info {
    pub sizeInBytes: ma_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_vfs_callbacks {
    pub onOpen: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const ::std::os::raw::c_char,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onOpenW: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const wchar_t,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onClose: ::std::option::Option<
        unsafe extern "C" fn(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result,
    >,
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pDst: *mut ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesRead: *mut usize,
        ) -> ma_result,
    >,
    pub onWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pSrc: *const ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesWritten: *mut usize,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            offset: ma_int64,
            origin: ma_seek_origin,
        ) -> ma_result,
    >,
    pub onTell: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pCursor: *mut ma_int64,
        ) -> ma_result,
    >,
    pub onInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pInfo: *mut ma_file_info,
        ) -> ma_result,
    >,
}
extern "C" {
    pub fn ma_vfs_open(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_open_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_close(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_read(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pDst: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesRead: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_write(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pSrc: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesWritten: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_seek(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_tell(pVFS: *mut ma_vfs, file: ma_vfs_file, pCursor: *mut ma_int64) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_info(pVFS: *mut ma_vfs, file: ma_vfs_file, pInfo: *mut ma_file_info)
        -> ma_result;
}
extern "C" {
    pub fn ma_vfs_open_and_read_file(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        ppData: *mut *mut ::std::os::raw::c_void,
        pSize: *mut usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_default_vfs {
    pub cb: ma_vfs_callbacks,
    pub allocationCallbacks: ma_allocation_callbacks,
}
extern "C" {
    pub fn ma_default_vfs_init(
        pVFS: *mut ma_default_vfs,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
