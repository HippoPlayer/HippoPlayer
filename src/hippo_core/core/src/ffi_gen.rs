/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const HS_FLOAT_TYPE: u32 = 4096;
pub const HS_INTEGER_TYPE: u32 = 4097;
pub const HS_BOOL_TYPE: u32 = 4098;
pub const HS_INTEGER_RANGE_TYPE: u32 = 4099;
pub const HS_STRING_RANGE_TYPE: u32 = 4100;
pub const HIPPO_SETTINGS_API_VERSION: u32 = 1;
pub const HIPPO_FILE_API_VERSION: u32 = 1;
pub const HippoMetadata_TitleTag: &'static [u8; 6usize] = b"title\0";
pub const HippoMetadata_SongTypeTag: &'static [u8; 10usize] = b"song_type\0";
pub const HippoMetadata_AuthoringToolTag: &'static [u8; 15usize] = b"authoring_tool\0";
pub const HippoMetadata_ArtistTag: &'static [u8; 7usize] = b"artist\0";
pub const HippoMetadata_AlbumTag: &'static [u8; 6usize] = b"album\0";
pub const HippoMetadata_DateTag: &'static [u8; 5usize] = b"date\0";
pub const HippoMetadata_GenreTag: &'static [u8; 6usize] = b"genre\0";
pub const HippoMetadata_MessageTag: &'static [u8; 8usize] = b"message\0";
pub const HippoMetadata_LengthTag: &'static [u8; 7usize] = b"length\0";
pub const HippoMetadata_SamplesTag: &'static [u8; 8usize] = b"sample_\0";
pub const HippoMetadata_InstrumentsTag: &'static [u8; 12usize] = b"instrument_\0";
pub const HIPPO_METADATA_API_VERSION: u32 = 1;
pub const HIPPO_LOG_API_VERSION: u32 = 1;
pub const FOOBAR: u32 = 2;
pub const HIPPO_PLAYBACK_PLUGIN_API_VERSION: u32 = 1;
pub const HIPPO_MESSAGE_API_VERSION: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSBase {
    pub widget_id: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub widget_type: ::std::os::raw::c_int,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSFloat {
    pub base: HSBase,
    pub value: f32,
    pub start_range: f32,
    pub end_range: f32,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSInteger {
    pub base: HSBase,
    pub value: ::std::os::raw::c_int,
    pub start_range: ::std::os::raw::c_int,
    pub end_range: ::std::os::raw::c_int,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSBool {
    pub base: HSBase,
    pub value: bool,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSIntegerRangeValue {
    pub name: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSStringRangeValue {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSIntegerFixedRange {
    pub base: HSBase,
    pub value: ::std::os::raw::c_int,
    pub values: *mut HSIntegerRangeValue,
    pub values_count: ::std::os::raw::c_int,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringFixedRange {
    pub base: HSBase,
    pub value: *const ::std::os::raw::c_char,
    pub values: *mut HSStringRangeValue,
    pub values_count: ::std::os::raw::c_int,
}
pub type HSStringFixedRange = StringFixedRange;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub union HSSetting {
    pub int_value: HSInteger,
    pub float_value: HSFloat,
    pub int_fixed_value: HSIntegerFixedRange,
    pub string_fixed_value: HSStringFixedRange,
    pub bool_value: HSBool,
    _bindgen_union_align: [u64; 7usize],
}
pub const HippoSettingsError_Ok: HippoSettingsError = 0;
pub const HippoSettingsError_NotFound: HippoSettingsError = 1;
pub const HippoSettingsError_DuplicatedId: HippoSettingsError = 2;
pub const HippoSettingsError_WrongType: HippoSettingsError = 3;
#[doc = ""]
pub type HippoSettingsError = u32;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoSettingsAPI {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub register_settings: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            settings: *const HSSetting,
            count: ::std::os::raw::c_int,
        ) -> HippoSettingsError,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            ext: *const ::std::os::raw::c_char,
            id: *const ::std::os::raw::c_char,
            value: *mut *const ::std::os::raw::c_char,
        ) -> HippoSettingsError,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            ext: *const ::std::os::raw::c_char,
            id: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_int,
        ) -> HippoSettingsError,
    >,
    pub get_float: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            ext: *const ::std::os::raw::c_char,
            id: *const ::std::os::raw::c_char,
            value: *mut f32,
        ) -> HippoSettingsError,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            ext: *const ::std::os::raw::c_char,
            id: *const ::std::os::raw::c_char,
            value: *mut bool,
        ) -> HippoSettingsError,
    >,
}
pub type HippoRegisterSettingsAPI = HippoSettingsAPI;
pub const HippoProbeResult_Supported: HippoProbeResult = 0;
pub const HippoProbeResult_Unsupported: HippoProbeResult = 1;
pub const HippoProbeResult_Unsure: HippoProbeResult = 2;
#[doc = ""]
pub type HippoProbeResult = u32;
pub const HippoFileSeek_Start: HippoFileSeek = 0;
pub const HippoFileSeek_Current: HippoFileSeek = 1;
pub const HippoFileSeek_End: HippoFileSeek = 2;
pub type HippoFileSeek = u32;
pub type HippoIoHandle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoIoResult {
    pub error_message: *const ::std::os::raw::c_char,
    pub status: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoApiPrivData {
    _unused: [u8; 0],
}
pub type HippoIoErrorCode = i32;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoIoAPI {
    pub exists: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoApiPrivData,
            filename: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_file_to_memory: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoApiPrivData,
            filename: *const ::std::os::raw::c_char,
            dest: *mut *mut ::std::os::raw::c_void,
            size: *mut u64,
        ) -> HippoIoErrorCode,
    >,
    pub free_file_to_memory: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoApiPrivData,
            dest: *mut ::std::os::raw::c_void,
        ) -> HippoIoErrorCode,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoApiPrivData,
            target: *const ::std::os::raw::c_char,
            handle: *mut HippoIoHandle,
        ) -> HippoIoErrorCode,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(handle: HippoIoHandle) -> HippoIoErrorCode>,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(handle: HippoIoHandle, res: *mut u64) -> HippoIoErrorCode,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            handle: HippoIoHandle,
            dest: *mut ::std::os::raw::c_void,
            size: u64,
        ) -> HippoIoErrorCode,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            handle: HippoIoHandle,
            type_: HippoFileSeek,
            step: i64,
        ) -> HippoIoErrorCode,
    >,
    pub priv_data: *mut HippoApiPrivData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoMetadataAPIPrivData {
    _unused: [u8; 0],
}
pub const HippoMetaEncoding_UTF8: HippoMetaEncoding = 0;
pub const HippoMetaEncoding_ShiftJS2: HippoMetaEncoding = 1;
pub type HippoMetaEncoding = u32;
pub const HippoMetadataResult_KeyNotFound: HippoMetadataResult = 0;
pub const HippoMetadataResult_UnableToMakeQuery: HippoMetadataResult = -1;
pub type HippoMetadataResult = i32;
pub type HippoMetadataId = u64;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoMetadataAPI {
    pub priv_data: *mut HippoMetadataAPIPrivData,
    pub create_url: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            url: *const ::std::os::raw::c_char,
        ) -> HippoMetadataId,
    >,
    pub set_tag: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            id: HippoMetadataId,
            tag: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_tag_f64: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            id: HippoMetadataId,
            tag: *const ::std::os::raw::c_char,
            d: f64,
        ),
    >,
    pub add_subsong: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            parent_id: HippoMetadataId,
            index: ::std::os::raw::c_int,
            name: *const ::std::os::raw::c_char,
            length: f32,
        ),
    >,
    pub add_sample: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            parent_id: HippoMetadataId,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub add_instrument: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            parent_id: HippoMetadataId,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub begin_get_all: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            url: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub end_get_all:
        ::std::option::Option<unsafe extern "C" fn(priv_data: *mut HippoMetadataAPIPrivData)>,
    pub get_all_entry: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            entry: ::std::os::raw::c_int,
            name: *mut *const ::std::os::raw::c_char,
            data: *mut *const ::std::os::raw::c_char,
            len_name: *mut ::std::os::raw::c_int,
            len_data: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_all_sample: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            entry: ::std::os::raw::c_int,
            text: *mut *const ::std::os::raw::c_char,
            text_len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_all_instrument: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut HippoMetadataAPIPrivData,
            entry: ::std::os::raw::c_int,
            text: *mut *const ::std::os::raw::c_char,
            text_len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
pub const HippoSettingsResult_Ok: HippoSettingResult = 0;
pub const HippoSettingsResult_SettingNotFound: HippoSettingResult = 1;
pub const HippoSettingsResult_KeyNotFound: HippoSettingResult = 2;
pub const HippoSettingsResult_InvalidType: HippoSettingResult = 3;
#[doc = ""]
pub type HippoSettingResult = u32;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoMessageAPI {
    pub priv_data: *mut HippoMessageAPI,
    pub send: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut HippoMessageAPI,
            data: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ),
    >,
}
pub const HIPPO_LOG_TRACE: _bindgen_ty_1 = 0;
pub const HIPPO_LOG_DEBUG: _bindgen_ty_1 = 1;
pub const HIPPO_LOG_INFO: _bindgen_ty_1 = 2;
pub const HIPPO_LOG_WARN: _bindgen_ty_1 = 3;
pub const HIPPO_LOG_ERROR: _bindgen_ty_1 = 4;
pub const HIPPO_LOG_FATAL: _bindgen_ty_1 = 5;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoLogAPI {
    pub priv_data: *mut ::std::os::raw::c_void,
    pub log_set_base_name: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            base_name: *const ::std::os::raw::c_char,
        ),
    >,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            priv_data: *mut ::std::os::raw::c_void,
            level: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >,
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoServicePrivData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoServiceAPI {
    pub private_data: *mut ::std::os::raw::c_void,
    pub get_log_api: ::std::option::Option<
        unsafe extern "C" fn(
            private_data: *mut ::std::os::raw::c_void,
            api_version: ::std::os::raw::c_int,
        ) -> *const HippoLogAPI,
    >,
    pub get_io_api: ::std::option::Option<
        unsafe extern "C" fn(
            private_data: *mut ::std::os::raw::c_void,
            api_version: ::std::os::raw::c_int,
        ) -> *const HippoIoAPI,
    >,
    pub get_metadata_api: ::std::option::Option<
        unsafe extern "C" fn(
            private_data: *mut ::std::os::raw::c_void,
            api_version: ::std::os::raw::c_int,
        ) -> *const HippoMetadataAPI,
    >,
    pub get_message_api: ::std::option::Option<
        unsafe extern "C" fn(
            private_data: *mut ::std::os::raw::c_void,
            api_version: ::std::os::raw::c_int,
        ) -> *const HippoMessageAPI,
    >,
    pub get_settings_api: ::std::option::Option<
        unsafe extern "C" fn(
            private_data: *mut ::std::os::raw::c_void,
            api_version: ::std::os::raw::c_int,
        ) -> *const HippoSettingsAPI,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoSaveAPI {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoLoadAPI {
    _unused: [u8; 0],
}
pub const HippoOutputType_u8: _bindgen_ty_2 = 1;
pub const HippoOutputType_s16: _bindgen_ty_2 = 2;
pub const HippoOutputType_s24: _bindgen_ty_2 = 3;
pub const HippoOutputType_s32: _bindgen_ty_2 = 4;
pub const HippoOutputType_f32: _bindgen_ty_2 = 5;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoReadInfo {
    pub sample_rate: u32,
    pub sample_count: u16,
    pub channel_count: u8,
    pub output_format: u8,
}
pub const HippoSettingsUpdate_Default: HippoSettingsUpdate = 0;
pub const HippoSettingsUpdate_RequireSongRestart: HippoSettingsUpdate = 1;
pub type HippoSettingsUpdate = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HippoPlaybackPlugin {
    pub api_version: u64,
    pub name: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub library_version: *const ::std::os::raw::c_char,
    pub probe_can_play: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const u8,
            data_size: u32,
            filename: *const ::std::os::raw::c_char,
            total_size: u64,
        ) -> HippoProbeResult,
    >,
    pub supported_extensions:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(services: *const HippoServiceAPI) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub event: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            data: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ),
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            url: *const ::std::os::raw::c_char,
            subsong: ::std::os::raw::c_int,
            settings: *const HippoSettingsAPI,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub read_data: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            dest: *mut ::std::os::raw::c_void,
            max_output_bytes: u32,
            native_sample_rate: u32,
        ) -> HippoReadInfo,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            ms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub metadata: ::std::option::Option<
        unsafe extern "C" fn(
            url: *const ::std::os::raw::c_char,
            services: *const HippoServiceAPI,
        ) -> ::std::os::raw::c_int,
    >,
    pub static_init: ::std::option::Option<
        unsafe extern "C" fn(log: *mut HippoLogAPI, services: *const HippoServiceAPI),
    >,
    pub settings_updated: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            settings: *const HippoSettingsAPI,
        ) -> HippoSettingsUpdate,
    >,
}
